
Mikroupravljac 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003384  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003548  08003548  00004548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003560  08003560  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003560  08003560  00004560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003568  08003568  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003568  08003568  00004568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800356c  0800356c  0000456c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003570  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000000c  0800357c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  0800357c  00005150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d35b  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e8d  00000000  00000000  00012397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00014228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b5  00000000  00000000  00014e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214c9  00000000  00000000  0001584d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f85e  00000000  00000000  00036d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccff4  00000000  00000000  00046574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113568  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033c0  00000000  00000000  001135ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0011696c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003530 	.word	0x08003530

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003530 	.word	0x08003530

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 030c 	add.w	r3, r7, #12
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	4b2e      	ldr	r3, [pc, #184]	@ (80005c8 <MX_GPIO_Init+0xd4>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a2d      	ldr	r2, [pc, #180]	@ (80005c8 <MX_GPIO_Init+0xd4>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b2b      	ldr	r3, [pc, #172]	@ (80005c8 <MX_GPIO_Init+0xd4>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	607b      	str	r3, [r7, #4]
 800052a:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <MX_GPIO_Init+0xd4>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	4a26      	ldr	r2, [pc, #152]	@ (80005c8 <MX_GPIO_Init+0xd4>)
 8000530:	f043 0302 	orr.w	r3, r3, #2
 8000534:	6313      	str	r3, [r2, #48]	@ 0x30
 8000536:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <MX_GPIO_Init+0xd4>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	f003 0302 	and.w	r3, r3, #2
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2132      	movs	r1, #50	@ 0x32
 8000546:	4821      	ldr	r0, [pc, #132]	@ (80005cc <MX_GPIO_Init+0xd8>)
 8000548:	f000 ff90 	bl	800146c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000552:	481f      	ldr	r0, [pc, #124]	@ (80005d0 <MX_GPIO_Init+0xdc>)
 8000554:	f000 ff8a 	bl	800146c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000558:	2332      	movs	r3, #50	@ 0x32
 800055a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055c:	2301      	movs	r3, #1
 800055e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	4619      	mov	r1, r3
 800056e:	4817      	ldr	r0, [pc, #92]	@ (80005cc <MX_GPIO_Init+0xd8>)
 8000570:	f000 fde8 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000574:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000578:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800057a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800057e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000580:	2301      	movs	r3, #1
 8000582:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	4619      	mov	r1, r3
 800058a:	4810      	ldr	r0, [pc, #64]	@ (80005cc <MX_GPIO_Init+0xd8>)
 800058c:	f000 fdda 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000590:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000594:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	2301      	movs	r3, #1
 8000598:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	4619      	mov	r1, r3
 80005a8:	4809      	ldr	r0, [pc, #36]	@ (80005d0 <MX_GPIO_Init+0xdc>)
 80005aa:	f000 fdcb 	bl	8001144 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2103      	movs	r1, #3
 80005b2:	2028      	movs	r0, #40	@ 0x28
 80005b4:	f000 fd8f 	bl	80010d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005b8:	2028      	movs	r0, #40	@ 0x28
 80005ba:	f000 fda8 	bl	800110e <HAL_NVIC_EnableIRQ>

}
 80005be:	bf00      	nop
 80005c0:	3720      	adds	r7, #32
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40020400 	.word	0x40020400
 80005d0:	40020000 	.word	0x40020000

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 fc0b 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f90f 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f7ff ff87 	bl	80004f4 <MX_GPIO_Init>
  MX_TIM4_Init();
 80005e6:	f000 f9fb 	bl	80009e0 <MX_TIM4_Init>
  MX_TIM6_Init();
 80005ea:	f000 fa55 	bl	8000a98 <MX_TIM6_Init>
  MX_UART4_Init();
 80005ee:	f000 fb07 	bl	8000c00 <MX_UART4_Init>
  MX_USART2_UART_Init();
 80005f2:	f000 fb2f 	bl	8000c54 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t msgt = 0x0, msgr = 0x0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	70fb      	strb	r3, [r7, #3]
 80005fa:	2300      	movs	r3, #0
 80005fc:	70bb      	strb	r3, [r7, #2]
  int i=0;
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000602:	2100      	movs	r1, #0
 8000604:	4878      	ldr	r0, [pc, #480]	@ (80007e8 <main+0x214>)
 8000606:	f001 fdcd 	bl	80021a4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim6);
 800060a:	4878      	ldr	r0, [pc, #480]	@ (80007ec <main+0x218>)
 800060c:	f001 fd12 	bl	8002034 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(status) {
 8000610:	4b77      	ldr	r3, [pc, #476]	@ (80007f0 <main+0x21c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b02      	cmp	r3, #2
 8000616:	d040      	beq.n	800069a <main+0xc6>
 8000618:	2b02      	cmp	r3, #2
 800061a:	f300 80ae 	bgt.w	800077a <main+0x1a6>
 800061e:	2b00      	cmp	r3, #0
 8000620:	d002      	beq.n	8000628 <main+0x54>
 8000622:	2b01      	cmp	r3, #1
 8000624:	d024      	beq.n	8000670 <main+0x9c>
 8000626:	e0a8      	b.n	800077a <main+0x1a6>
	  	  case 0:	//Slucaj greske, titrajuce zuto
	  		  if(i==0){		//uvjet da se ne vrti case 0 u krug
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b00      	cmp	r3, #0
 800062c:	f040 80a4 	bne.w	8000778 <main+0x1a4>

	  		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1500);
 8000630:	4b6d      	ldr	r3, [pc, #436]	@ (80007e8 <main+0x214>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000638:	635a      	str	r2, [r3, #52]	@ 0x34
	  			  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800063a:	2100      	movs	r1, #0
 800063c:	486a      	ldr	r0, [pc, #424]	@ (80007e8 <main+0x214>)
 800063e:	f001 fdb1 	bl	80021a4 <HAL_TIM_PWM_Start>
	  			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);	//gasenje svega osim zutog
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000648:	486a      	ldr	r0, [pc, #424]	@ (80007f4 <main+0x220>)
 800064a:	f000 ff0f 	bl	800146c <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, 0);	//^
 800064e:	2200      	movs	r2, #0
 8000650:	2132      	movs	r1, #50	@ 0x32
 8000652:	4869      	ldr	r0, [pc, #420]	@ (80007f8 <main+0x224>)
 8000654:	f000 ff0a 	bl	800146c <HAL_GPIO_WritePin>
	  			  __HAL_TIM_SET_COUNTER(&htim6, 0);		//timer reset, 18s do sljedeceg ponvaljanja case 0
 8000658:	4b64      	ldr	r3, [pc, #400]	@ (80007ec <main+0x218>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2200      	movs	r2, #0
 800065e:	625a      	str	r2, [r3, #36]	@ 0x24
	  			  i++;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3301      	adds	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
	  			HAL_Delay(3000);
 8000666:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800066a:	f000 fc35 	bl	8000ed8 <HAL_Delay>
	  		  }

			  break;
 800066e:	e083      	b.n	8000778 <main+0x1a4>

		  case 1:	//Zeleno za aute
			  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8000670:	2100      	movs	r1, #0
 8000672:	485d      	ldr	r0, [pc, #372]	@ (80007e8 <main+0x214>)
 8000674:	f001 fe5e 	bl	8002334 <HAL_TIM_PWM_Stop>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);	//zeleno za aute
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800067e:	485d      	ldr	r0, [pc, #372]	@ (80007f4 <main+0x220>)
 8000680:	f000 fef4 	bl	800146c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);	//crveno za pješake
 8000684:	2201      	movs	r2, #1
 8000686:	2120      	movs	r1, #32
 8000688:	485b      	ldr	r0, [pc, #364]	@ (80007f8 <main+0x224>)
 800068a:	f000 feef 	bl	800146c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_4, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2112      	movs	r1, #18
 8000692:	4859      	ldr	r0, [pc, #356]	@ (80007f8 <main+0x224>)
 8000694:	f000 feea 	bl	800146c <HAL_GPIO_WritePin>
			  break;
 8000698:	e06f      	b.n	800077a <main+0x1a6>

		  case 2:	//Zeleno za pjesake
			  msgt = 0x6;
 800069a:	2306      	movs	r3, #6
 800069c:	70fb      	strb	r3, [r7, #3]
			  HAL_UART_Transmit(&huart4, &msgt, sizeof(msgt), 100);
 800069e:	1cf9      	adds	r1, r7, #3
 80006a0:	2364      	movs	r3, #100	@ 0x64
 80006a2:	2201      	movs	r2, #1
 80006a4:	4855      	ldr	r0, [pc, #340]	@ (80007fc <main+0x228>)
 80006a6:	f002 fac5 	bl	8002c34 <HAL_UART_Transmit>
			  HAL_Delay(20);
 80006aa:	2014      	movs	r0, #20
 80006ac:	f000 fc14 	bl	8000ed8 <HAL_Delay>
			  HAL_UART_Receive(&huart4, &msgr, sizeof(msgr), 1000);
 80006b0:	1cb9      	adds	r1, r7, #2
 80006b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006b6:	2201      	movs	r2, #1
 80006b8:	4850      	ldr	r0, [pc, #320]	@ (80007fc <main+0x228>)
 80006ba:	f002 fb46 	bl	8002d4a <HAL_UART_Receive>
			  if(msgr == msgt){
 80006be:	78ba      	ldrb	r2, [r7, #2]
 80006c0:	78fb      	ldrb	r3, [r7, #3]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d154      	bne.n	8000770 <main+0x19c>
				  msgt = 0x0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	70fb      	strb	r3, [r7, #3]
				  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80006ca:	2100      	movs	r1, #0
 80006cc:	4846      	ldr	r0, [pc, #280]	@ (80007e8 <main+0x214>)
 80006ce:	f001 fe31 	bl	8002334 <HAL_TIM_PWM_Stop>
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 3000);
 80006d2:	4b45      	ldr	r3, [pc, #276]	@ (80007e8 <main+0x214>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80006da:	635a      	str	r2, [r3, #52]	@ 0x34
				  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);		//upaljeno zuto 3s prije promjene na crveno
 80006dc:	2100      	movs	r1, #0
 80006de:	4842      	ldr	r0, [pc, #264]	@ (80007e8 <main+0x214>)
 80006e0:	f001 fd60 	bl	80021a4 <HAL_TIM_PWM_Start>
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);		//gasi zeleno za aute
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006ea:	4842      	ldr	r0, [pc, #264]	@ (80007f4 <main+0x220>)
 80006ec:	f000 febe 	bl	800146c <HAL_GPIO_WritePin>
				  HAL_Delay(3000);
 80006f0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80006f4:	f000 fbf0 	bl	8000ed8 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);		//gasi crveno za pjesake
 80006f8:	2200      	movs	r2, #0
 80006fa:	2120      	movs	r1, #32
 80006fc:	483e      	ldr	r0, [pc, #248]	@ (80007f8 <main+0x224>)
 80006fe:	f000 feb5 	bl	800146c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_4, 1);	//zeleno pjesaci i crveno auti
 8000702:	2201      	movs	r2, #1
 8000704:	2112      	movs	r1, #18
 8000706:	483c      	ldr	r0, [pc, #240]	@ (80007f8 <main+0x224>)
 8000708:	f000 feb0 	bl	800146c <HAL_GPIO_WritePin>
				  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800070c:	2100      	movs	r1, #0
 800070e:	4836      	ldr	r0, [pc, #216]	@ (80007e8 <main+0x214>)
 8000710:	f001 fe10 	bl	8002334 <HAL_TIM_PWM_Stop>
				  HAL_Delay(20000);		//20s za prijelaz pjesaka
 8000714:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8000718:	f000 fbde 	bl	8000ed8 <HAL_Delay>
				  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800071c:	2100      	movs	r1, #0
 800071e:	4832      	ldr	r0, [pc, #200]	@ (80007e8 <main+0x214>)
 8000720:	f001 fd40 	bl	80021a4 <HAL_TIM_PWM_Start>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);	//gasimo zeleno pjesake
 8000724:	2200      	movs	r2, #0
 8000726:	2102      	movs	r1, #2
 8000728:	4833      	ldr	r0, [pc, #204]	@ (80007f8 <main+0x224>)
 800072a:	f000 fe9f 	bl	800146c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);	//crveno za pjesake
 800072e:	2201      	movs	r2, #1
 8000730:	2120      	movs	r1, #32
 8000732:	4831      	ldr	r0, [pc, #196]	@ (80007f8 <main+0x224>)
 8000734:	f000 fe9a 	bl	800146c <HAL_GPIO_WritePin>
				  HAL_Delay(3000);		//3s zutog prije promjene
 8000738:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800073c:	f000 fbcc 	bl	8000ed8 <HAL_Delay>
				  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8000740:	2100      	movs	r1, #0
 8000742:	4829      	ldr	r0, [pc, #164]	@ (80007e8 <main+0x214>)
 8000744:	f001 fdf6 	bl	8002334 <HAL_TIM_PWM_Stop>
				  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1500);	//Vracanje PWM Duty cyclea za titranje
 8000748:	4b27      	ldr	r3, [pc, #156]	@ (80007e8 <main+0x214>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000750:	635a      	str	r2, [r3, #52]	@ 0x34
				  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);	//zeleno za aute
 8000752:	2201      	movs	r2, #1
 8000754:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000758:	4826      	ldr	r0, [pc, #152]	@ (80007f4 <main+0x220>)
 800075a:	f000 fe87 	bl	800146c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_4, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2112      	movs	r1, #18
 8000762:	4825      	ldr	r0, [pc, #148]	@ (80007f8 <main+0x224>)
 8000764:	f000 fe82 	bl	800146c <HAL_GPIO_WritePin>
				  status = 1;
 8000768:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <main+0x21c>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
				  break;
 800076e:	e004      	b.n	800077a <main+0x1a6>
			  }else{
				  status = 0;
 8000770:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <main+0x21c>)
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
				  break;
 8000776:	e000      	b.n	800077a <main+0x1a6>
			  break;
 8000778:	bf00      	nop
			  }
	  }
	  msgt = 0x1;
 800077a:	2301      	movs	r3, #1
 800077c:	70fb      	strb	r3, [r7, #3]
	  msgr = 0x0;
 800077e:	2300      	movs	r3, #0
 8000780:	70bb      	strb	r3, [r7, #2]
	  HAL_UART_Transmit(&huart4, &msgt, sizeof(msgt), 1000);	//provjera komunikcaije
 8000782:	1cf9      	adds	r1, r7, #3
 8000784:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000788:	2201      	movs	r2, #1
 800078a:	481c      	ldr	r0, [pc, #112]	@ (80007fc <main+0x228>)
 800078c:	f002 fa52 	bl	8002c34 <HAL_UART_Transmit>
	  //HAL_Delay(20);
	  HAL_UART_Receive(&huart4, &msgr, sizeof(msgr), 100);
 8000790:	1cb9      	adds	r1, r7, #2
 8000792:	2364      	movs	r3, #100	@ 0x64
 8000794:	2201      	movs	r2, #1
 8000796:	4819      	ldr	r0, [pc, #100]	@ (80007fc <main+0x228>)
 8000798:	f002 fad7 	bl	8002d4a <HAL_UART_Receive>
	 // HAL_Delay(20);
	  if(status != 2){
 800079c:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <main+0x21c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d015      	beq.n	80007d0 <main+0x1fc>
		  if(msgr == msgt){
 80007a4:	78ba      	ldrb	r2, [r7, #2]
 80007a6:	78fb      	ldrb	r3, [r7, #3]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d103      	bne.n	80007b4 <main+0x1e0>
			  status = 1;
 80007ac:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <main+0x21c>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	e00d      	b.n	80007d0 <main+0x1fc>
		  }else{
			  status = 0;
 80007b4:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <main+0x21c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
			  HAL_TIM_Base_Start(&htim6);
 80007ba:	480c      	ldr	r0, [pc, #48]	@ (80007ec <main+0x218>)
 80007bc:	f001 fc3a 	bl	8002034 <HAL_TIM_Base_Start>
			  msgt = 0x0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	70fb      	strb	r3, [r7, #3]
			  HAL_UART_Transmit(&huart4, &msgt, sizeof(msgt), 100);
 80007c4:	1cf9      	adds	r1, r7, #3
 80007c6:	2364      	movs	r3, #100	@ 0x64
 80007c8:	2201      	movs	r2, #1
 80007ca:	480c      	ldr	r0, [pc, #48]	@ (80007fc <main+0x228>)
 80007cc:	f002 fa32 	bl	8002c34 <HAL_UART_Transmit>
		  }
	  }
	  if(__HAL_TIM_GetCounter(&htim6) >= 9000){
 80007d0:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <main+0x218>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007d6:	f242 3227 	movw	r2, #8999	@ 0x2327
 80007da:	4293      	cmp	r3, r2
 80007dc:	f67f af18 	bls.w	8000610 <main+0x3c>
		  i=0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
	  switch(status) {
 80007e4:	e714      	b.n	8000610 <main+0x3c>
 80007e6:	bf00      	nop
 80007e8:	2000002c 	.word	0x2000002c
 80007ec:	20000074 	.word	0x20000074
 80007f0:	20000028 	.word	0x20000028
 80007f4:	40020000 	.word	0x40020000
 80007f8:	40020400 	.word	0x40020400
 80007fc:	200000bc 	.word	0x200000bc

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	@ 0x50
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2234      	movs	r2, #52	@ 0x34
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f002 fe62 	bl	80034d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	4b23      	ldr	r3, [pc, #140]	@ (80008b8 <SystemClock_Config+0xb8>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082c:	4a22      	ldr	r2, [pc, #136]	@ (80008b8 <SystemClock_Config+0xb8>)
 800082e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000832:	6413      	str	r3, [r2, #64]	@ 0x40
 8000834:	4b20      	ldr	r3, [pc, #128]	@ (80008b8 <SystemClock_Config+0xb8>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000840:	2300      	movs	r3, #0
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <SystemClock_Config+0xbc>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800084c:	4a1b      	ldr	r2, [pc, #108]	@ (80008bc <SystemClock_Config+0xbc>)
 800084e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000852:	6013      	str	r3, [r2, #0]
 8000854:	4b19      	ldr	r3, [pc, #100]	@ (80008bc <SystemClock_Config+0xbc>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000860:	2302      	movs	r3, #2
 8000862:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000864:	2301      	movs	r3, #1
 8000866:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000868:	2310      	movs	r3, #16
 800086a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800086c:	2300      	movs	r3, #0
 800086e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4618      	mov	r0, r3
 8000876:	f001 f8ef 	bl	8001a58 <HAL_RCC_OscConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000880:	f000 f836 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000884:	230f      	movs	r3, #15
 8000886:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000898:	f107 0308 	add.w	r3, r7, #8
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 fe16 	bl	80014d0 <HAL_RCC_ClockConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008aa:	f000 f821 	bl	80008f0 <Error_Handler>
  }
}
 80008ae:	bf00      	nop
 80008b0:	3750      	adds	r7, #80	@ 0x50
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40007000 	.word	0x40007000

080008c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	80fb      	strh	r3, [r7, #6]
		/* Prevent unused argument(s) compilation warning */

		if(GPIO_Pin == GPIO_PIN_10 || GPIO_Pin == GPIO_PIN_12){
 80008ca:	88fb      	ldrh	r3, [r7, #6]
 80008cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80008d0:	d003      	beq.n	80008da <HAL_GPIO_EXTI_Callback+0x1a>
 80008d2:	88fb      	ldrh	r3, [r7, #6]
 80008d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80008d8:	d102      	bne.n	80008e0 <HAL_GPIO_EXTI_Callback+0x20>
			status = 2;
 80008da:	4b04      	ldr	r3, [pc, #16]	@ (80008ec <HAL_GPIO_EXTI_Callback+0x2c>)
 80008dc:	2202      	movs	r2, #2
 80008de:	601a      	str	r2, [r3, #0]
		}

}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	20000028 	.word	0x20000028

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <Error_Handler+0x8>

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	@ (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000910:	6453      	str	r3, [r2, #68]	@ 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	@ (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	@ (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	@ 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <NMI_Handler+0x4>

08000954 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <MemManage_Handler+0x4>

08000964 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <UsageFault_Handler+0x4>

08000974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a2:	f000 fa79 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}

080009aa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80009ae:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80009b2:	f000 fd75 	bl	80014a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <SystemInit+0x20>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009c6:	4a05      	ldr	r2, [pc, #20]	@ (80009dc <SystemInit+0x20>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	@ 0x28
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e6:	f107 0320 	add.w	r3, r7, #32
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]
 80009fe:	615a      	str	r2, [r3, #20]
 8000a00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a02:	4b23      	ldr	r3, [pc, #140]	@ (8000a90 <MX_TIM4_Init+0xb0>)
 8000a04:	4a23      	ldr	r2, [pc, #140]	@ (8000a94 <MX_TIM4_Init+0xb4>)
 8000a06:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 15999;
 8000a08:	4b21      	ldr	r3, [pc, #132]	@ (8000a90 <MX_TIM4_Init+0xb0>)
 8000a0a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000a0e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a10:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <MX_TIM4_Init+0xb0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2999;
 8000a16:	4b1e      	ldr	r3, [pc, #120]	@ (8000a90 <MX_TIM4_Init+0xb0>)
 8000a18:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000a1c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <MX_TIM4_Init+0xb0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	@ (8000a90 <MX_TIM4_Init+0xb0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a2a:	4819      	ldr	r0, [pc, #100]	@ (8000a90 <MX_TIM4_Init+0xb0>)
 8000a2c:	f001 fb6a 	bl	8002104 <HAL_TIM_PWM_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000a36:	f7ff ff5b 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a42:	f107 0320 	add.w	r3, r7, #32
 8000a46:	4619      	mov	r1, r3
 8000a48:	4811      	ldr	r0, [pc, #68]	@ (8000a90 <MX_TIM4_Init+0xb0>)
 8000a4a:	f002 f827 	bl	8002a9c <HAL_TIMEx_MasterConfigSynchronization>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000a54:	f7ff ff4c 	bl	80008f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a58:	2360      	movs	r3, #96	@ 0x60
 8000a5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8000a5c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000a60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4807      	ldr	r0, [pc, #28]	@ (8000a90 <MX_TIM4_Init+0xb0>)
 8000a72:	f001 fccf 	bl	8002414 <HAL_TIM_PWM_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000a7c:	f7ff ff38 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a80:	4803      	ldr	r0, [pc, #12]	@ (8000a90 <MX_TIM4_Init+0xb0>)
 8000a82:	f000 f883 	bl	8000b8c <HAL_TIM_MspPostInit>

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	@ 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2000002c 	.word	0x2000002c
 8000a94:	40000800 	.word	0x40000800

08000a98 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <MX_TIM6_Init+0x64>)
 8000aa8:	4a15      	ldr	r2, [pc, #84]	@ (8000b00 <MX_TIM6_Init+0x68>)
 8000aaa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8000aac:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <MX_TIM6_Init+0x64>)
 8000aae:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000ab2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <MX_TIM6_Init+0x64>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 29999;
 8000aba:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <MX_TIM6_Init+0x64>)
 8000abc:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000ac0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <MX_TIM6_Init+0x64>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ac8:	480c      	ldr	r0, [pc, #48]	@ (8000afc <MX_TIM6_Init+0x64>)
 8000aca:	f001 fa63 	bl	8001f94 <HAL_TIM_Base_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ad4:	f7ff ff0c 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_TIM6_Init+0x64>)
 8000ae6:	f001 ffd9 	bl	8002a9c <HAL_TIMEx_MasterConfigSynchronization>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000af0:	f7ff fefe 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000074 	.word	0x20000074
 8000b00:	40001000 	.word	0x40001000

08000b04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0b      	ldr	r2, [pc, #44]	@ (8000b40 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d10d      	bne.n	8000b32 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b44 <HAL_TIM_PWM_MspInit+0x40>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	4a09      	ldr	r2, [pc, #36]	@ (8000b44 <HAL_TIM_PWM_MspInit+0x40>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b26:	4b07      	ldr	r3, [pc, #28]	@ (8000b44 <HAL_TIM_PWM_MspInit+0x40>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40000800 	.word	0x40000800
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0b      	ldr	r2, [pc, #44]	@ (8000b84 <HAL_TIM_Base_MspInit+0x3c>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d10d      	bne.n	8000b76 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <HAL_TIM_Base_MspInit+0x40>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b62:	4a09      	ldr	r2, [pc, #36]	@ (8000b88 <HAL_TIM_Base_MspInit+0x40>)
 8000b64:	f043 0310 	orr.w	r3, r3, #16
 8000b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6a:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <HAL_TIM_Base_MspInit+0x40>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	f003 0310 	and.w	r3, r3, #16
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40001000 	.word	0x40001000
 8000b88:	40023800 	.word	0x40023800

08000b8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b088      	sub	sp, #32
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a12      	ldr	r2, [pc, #72]	@ (8000bf4 <HAL_TIM_MspPostInit+0x68>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d11d      	bne.n	8000bea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <HAL_TIM_MspPostInit+0x6c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a10      	ldr	r2, [pc, #64]	@ (8000bf8 <HAL_TIM_MspPostInit+0x6c>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <HAL_TIM_MspPostInit+0x6c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bca:	2340      	movs	r3, #64	@ 0x40
 8000bcc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <HAL_TIM_MspPostInit+0x70>)
 8000be6:	f000 faad 	bl	8001144 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000bea:	bf00      	nop
 8000bec:	3720      	adds	r7, #32
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40000800 	.word	0x40000800
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020400 	.word	0x40020400

08000c00 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c04:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <MX_UART4_Init+0x4c>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	@ (8000c50 <MX_UART4_Init+0x50>)
 8000c08:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <MX_UART4_Init+0x4c>)
 8000c0c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c10:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <MX_UART4_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <MX_UART4_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <MX_UART4_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <MX_UART4_Init+0x4c>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <MX_UART4_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <MX_UART4_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <MX_UART4_Init+0x4c>)
 8000c38:	f001 ffac 	bl	8002b94 <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000c42:	f7ff fe55 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	200000bc 	.word	0x200000bc
 8000c50:	40004c00 	.word	0x40004c00

08000c54 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ca4 <MX_USART2_UART_Init+0x50>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c60:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <MX_USART2_UART_Init+0x4c>)
 8000c8c:	f001 ff82 	bl	8002b94 <HAL_UART_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c96:	f7ff fe2b 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000104 	.word	0x20000104
 8000ca4:	40004400 	.word	0x40004400

08000ca8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08c      	sub	sp, #48	@ 0x30
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a32      	ldr	r2, [pc, #200]	@ (8000d90 <HAL_UART_MspInit+0xe8>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d12c      	bne.n	8000d24 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
 8000cce:	4b31      	ldr	r3, [pc, #196]	@ (8000d94 <HAL_UART_MspInit+0xec>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	4a30      	ldr	r2, [pc, #192]	@ (8000d94 <HAL_UART_MspInit+0xec>)
 8000cd4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cda:	4b2e      	ldr	r3, [pc, #184]	@ (8000d94 <HAL_UART_MspInit+0xec>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ce2:	61bb      	str	r3, [r7, #24]
 8000ce4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	4b2a      	ldr	r3, [pc, #168]	@ (8000d94 <HAL_UART_MspInit+0xec>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	4a29      	ldr	r2, [pc, #164]	@ (8000d94 <HAL_UART_MspInit+0xec>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf6:	4b27      	ldr	r3, [pc, #156]	@ (8000d94 <HAL_UART_MspInit+0xec>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d02:	2303      	movs	r3, #3
 8000d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d12:	2308      	movs	r3, #8
 8000d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	481e      	ldr	r0, [pc, #120]	@ (8000d98 <HAL_UART_MspInit+0xf0>)
 8000d1e:	f000 fa11 	bl	8001144 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d22:	e030      	b.n	8000d86 <HAL_UART_MspInit+0xde>
  else if(uartHandle->Instance==USART2)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a1c      	ldr	r2, [pc, #112]	@ (8000d9c <HAL_UART_MspInit+0xf4>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d12b      	bne.n	8000d86 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <HAL_UART_MspInit+0xec>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	4a17      	ldr	r2, [pc, #92]	@ (8000d94 <HAL_UART_MspInit+0xec>)
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d3e:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <HAL_UART_MspInit+0xec>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <HAL_UART_MspInit+0xec>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a10      	ldr	r2, [pc, #64]	@ (8000d94 <HAL_UART_MspInit+0xec>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <HAL_UART_MspInit+0xec>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d66:	230c      	movs	r3, #12
 8000d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d72:	2303      	movs	r3, #3
 8000d74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d76:	2307      	movs	r3, #7
 8000d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <HAL_UART_MspInit+0xf0>)
 8000d82:	f000 f9df 	bl	8001144 <HAL_GPIO_Init>
}
 8000d86:	bf00      	nop
 8000d88:	3730      	adds	r7, #48	@ 0x30
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40004c00 	.word	0x40004c00
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40020000 	.word	0x40020000
 8000d9c:	40004400 	.word	0x40004400

08000da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dd8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000da4:	f7ff fe0a 	bl	80009bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	@ (8000ddc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	@ (8000de0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	@ (8000de4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dce:	f002 fb8b 	bl	80034e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fbff 	bl	80005d4 <main>
  bx  lr    
 8000dd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000de4:	08003570 	.word	0x08003570
  ldr r2, =_sbss
 8000de8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dec:	20000150 	.word	0x20000150

08000df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e34 <HAL_Init+0x40>)
 8000dfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e04:	4b0b      	ldr	r3, [pc, #44]	@ (8000e34 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <HAL_Init+0x40>)
 8000e0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e10:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a07      	ldr	r2, [pc, #28]	@ (8000e34 <HAL_Init+0x40>)
 8000e16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f000 f94f 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e22:	200f      	movs	r0, #15
 8000e24:	f000 f808 	bl	8000e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e28:	f7ff fd68 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023c00 	.word	0x40023c00

08000e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e40:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <HAL_InitTick+0x54>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <HAL_InitTick+0x58>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f967 	bl	800112a <HAL_SYSTICK_Config>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00e      	b.n	8000e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b0f      	cmp	r3, #15
 8000e6a:	d80a      	bhi.n	8000e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f000 f92f 	bl	80010d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e78:	4a06      	ldr	r2, [pc, #24]	@ (8000e94 <HAL_InitTick+0x5c>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e000      	b.n	8000e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000004 	.word	0x20000004

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	@ (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	2000014c 	.word	0x2000014c

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	@ (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	2000014c 	.word	0x2000014c

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff ffee 	bl	8000ec0 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8000f1c <HAL_Delay+0x44>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffde 	bl	8000ec0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008

08000f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	@ (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <__NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	db0b      	blt.n	8000fae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f003 021f 	and.w	r2, r3, #31
 8000f9c:	4907      	ldr	r1, [pc, #28]	@ (8000fbc <__NVIC_EnableIRQ+0x38>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	095b      	lsrs	r3, r3, #5
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000e100 	.word	0xe000e100

08000fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0a      	blt.n	8000fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	490c      	ldr	r1, [pc, #48]	@ (800100c <__NVIC_SetPriority+0x4c>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe8:	e00a      	b.n	8001000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4908      	ldr	r1, [pc, #32]	@ (8001010 <__NVIC_SetPriority+0x50>)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	761a      	strb	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	@ 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f1c3 0307 	rsb	r3, r3, #7
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf28      	it	cs
 8001032:	2304      	movcs	r3, #4
 8001034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3304      	adds	r3, #4
 800103a:	2b06      	cmp	r3, #6
 800103c:	d902      	bls.n	8001044 <NVIC_EncodePriority+0x30>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b03      	subs	r3, #3
 8001042:	e000      	b.n	8001046 <NVIC_EncodePriority+0x32>
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800105c:	f04f 31ff 	mov.w	r1, #4294967295
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	43d9      	mvns	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	4313      	orrs	r3, r2
         );
}
 800106e:	4618      	mov	r0, r3
 8001070:	3724      	adds	r7, #36	@ 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800108c:	d301      	bcc.n	8001092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108e:	2301      	movs	r3, #1
 8001090:	e00f      	b.n	80010b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001092:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <SysTick_Config+0x40>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109a:	210f      	movs	r1, #15
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f7ff ff8e 	bl	8000fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <SysTick_Config+0x40>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <SysTick_Config+0x40>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010

080010c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff29 	bl	8000f20 <__NVIC_SetPriorityGrouping>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e8:	f7ff ff3e 	bl	8000f68 <__NVIC_GetPriorityGrouping>
 80010ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68b9      	ldr	r1, [r7, #8]
 80010f2:	6978      	ldr	r0, [r7, #20]
 80010f4:	f7ff ff8e 	bl	8001014 <NVIC_EncodePriority>
 80010f8:	4602      	mov	r2, r0
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fe:	4611      	mov	r1, r2
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff5d 	bl	8000fc0 <__NVIC_SetPriority>
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	4603      	mov	r3, r0
 8001116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff31 	bl	8000f84 <__NVIC_EnableIRQ>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ffa2 	bl	800107c <SysTick_Config>
 8001138:	4603      	mov	r3, r0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	@ 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
 800115e:	e165      	b.n	800142c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001160:	2201      	movs	r2, #1
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	429a      	cmp	r2, r3
 800117a:	f040 8154 	bne.w	8001426 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	2b01      	cmp	r3, #1
 8001188:	d005      	beq.n	8001196 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001192:	2b02      	cmp	r3, #2
 8001194:	d130      	bne.n	80011f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	2203      	movs	r2, #3
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	68da      	ldr	r2, [r3, #12]
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011cc:	2201      	movs	r2, #1
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	091b      	lsrs	r3, r3, #4
 80011e2:	f003 0201 	and.w	r2, r3, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b03      	cmp	r3, #3
 8001202:	d017      	beq.n	8001234 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2203      	movs	r2, #3
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d123      	bne.n	8001288 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	08da      	lsrs	r2, r3, #3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3208      	adds	r2, #8
 8001248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	f003 0307 	and.w	r3, r3, #7
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	220f      	movs	r2, #15
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	691a      	ldr	r2, [r3, #16]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	08da      	lsrs	r2, r3, #3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3208      	adds	r2, #8
 8001282:	69b9      	ldr	r1, [r7, #24]
 8001284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0203 	and.w	r2, r3, #3
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 80ae 	beq.w	8001426 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001444 <HAL_GPIO_Init+0x300>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	4a5c      	ldr	r2, [pc, #368]	@ (8001444 <HAL_GPIO_Init+0x300>)
 80012d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012da:	4b5a      	ldr	r3, [pc, #360]	@ (8001444 <HAL_GPIO_Init+0x300>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012e6:	4a58      	ldr	r2, [pc, #352]	@ (8001448 <HAL_GPIO_Init+0x304>)
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	089b      	lsrs	r3, r3, #2
 80012ec:	3302      	adds	r3, #2
 80012ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	220f      	movs	r2, #15
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4f      	ldr	r2, [pc, #316]	@ (800144c <HAL_GPIO_Init+0x308>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d025      	beq.n	800135e <HAL_GPIO_Init+0x21a>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4e      	ldr	r2, [pc, #312]	@ (8001450 <HAL_GPIO_Init+0x30c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d01f      	beq.n	800135a <HAL_GPIO_Init+0x216>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4d      	ldr	r2, [pc, #308]	@ (8001454 <HAL_GPIO_Init+0x310>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d019      	beq.n	8001356 <HAL_GPIO_Init+0x212>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4c      	ldr	r2, [pc, #304]	@ (8001458 <HAL_GPIO_Init+0x314>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d013      	beq.n	8001352 <HAL_GPIO_Init+0x20e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4b      	ldr	r2, [pc, #300]	@ (800145c <HAL_GPIO_Init+0x318>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d00d      	beq.n	800134e <HAL_GPIO_Init+0x20a>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4a      	ldr	r2, [pc, #296]	@ (8001460 <HAL_GPIO_Init+0x31c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d007      	beq.n	800134a <HAL_GPIO_Init+0x206>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a49      	ldr	r2, [pc, #292]	@ (8001464 <HAL_GPIO_Init+0x320>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d101      	bne.n	8001346 <HAL_GPIO_Init+0x202>
 8001342:	2306      	movs	r3, #6
 8001344:	e00c      	b.n	8001360 <HAL_GPIO_Init+0x21c>
 8001346:	2307      	movs	r3, #7
 8001348:	e00a      	b.n	8001360 <HAL_GPIO_Init+0x21c>
 800134a:	2305      	movs	r3, #5
 800134c:	e008      	b.n	8001360 <HAL_GPIO_Init+0x21c>
 800134e:	2304      	movs	r3, #4
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x21c>
 8001352:	2303      	movs	r3, #3
 8001354:	e004      	b.n	8001360 <HAL_GPIO_Init+0x21c>
 8001356:	2302      	movs	r3, #2
 8001358:	e002      	b.n	8001360 <HAL_GPIO_Init+0x21c>
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <HAL_GPIO_Init+0x21c>
 800135e:	2300      	movs	r3, #0
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	f002 0203 	and.w	r2, r2, #3
 8001366:	0092      	lsls	r2, r2, #2
 8001368:	4093      	lsls	r3, r2
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001370:	4935      	ldr	r1, [pc, #212]	@ (8001448 <HAL_GPIO_Init+0x304>)
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	3302      	adds	r3, #2
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800137e:	4b3a      	ldr	r3, [pc, #232]	@ (8001468 <HAL_GPIO_Init+0x324>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013a2:	4a31      	ldr	r2, [pc, #196]	@ (8001468 <HAL_GPIO_Init+0x324>)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001468 <HAL_GPIO_Init+0x324>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013cc:	4a26      	ldr	r2, [pc, #152]	@ (8001468 <HAL_GPIO_Init+0x324>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013d2:	4b25      	ldr	r3, [pc, #148]	@ (8001468 <HAL_GPIO_Init+0x324>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001468 <HAL_GPIO_Init+0x324>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <HAL_GPIO_Init+0x324>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001420:	4a11      	ldr	r2, [pc, #68]	@ (8001468 <HAL_GPIO_Init+0x324>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3301      	adds	r3, #1
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	2b0f      	cmp	r3, #15
 8001430:	f67f ae96 	bls.w	8001160 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3724      	adds	r7, #36	@ 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	40013800 	.word	0x40013800
 800144c:	40020000 	.word	0x40020000
 8001450:	40020400 	.word	0x40020400
 8001454:	40020800 	.word	0x40020800
 8001458:	40020c00 	.word	0x40020c00
 800145c:	40021000 	.word	0x40021000
 8001460:	40021400 	.word	0x40021400
 8001464:	40021800 	.word	0x40021800
 8001468:	40013c00 	.word	0x40013c00

0800146c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	807b      	strh	r3, [r7, #2]
 8001478:	4613      	mov	r3, r2
 800147a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800147c:	787b      	ldrb	r3, [r7, #1]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001482:	887a      	ldrh	r2, [r7, #2]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001488:	e003      	b.n	8001492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800148a:	887b      	ldrh	r3, [r7, #2]
 800148c:	041a      	lsls	r2, r3, #16
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	619a      	str	r2, [r3, #24]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014aa:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014ac:	695a      	ldr	r2, [r3, #20]
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	4013      	ands	r3, r2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d006      	beq.n	80014c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014b6:	4a05      	ldr	r2, [pc, #20]	@ (80014cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014b8:	88fb      	ldrh	r3, [r7, #6]
 80014ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff f9fe 	bl	80008c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40013c00 	.word	0x40013c00

080014d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e0cc      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014e4:	4b68      	ldr	r3, [pc, #416]	@ (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 030f 	and.w	r3, r3, #15
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d90c      	bls.n	800150c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f2:	4b65      	ldr	r3, [pc, #404]	@ (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fa:	4b63      	ldr	r3, [pc, #396]	@ (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d001      	beq.n	800150c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e0b8      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d020      	beq.n	800155a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001524:	4b59      	ldr	r3, [pc, #356]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	4a58      	ldr	r2, [pc, #352]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800152e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800153c:	4b53      	ldr	r3, [pc, #332]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	4a52      	ldr	r2, [pc, #328]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001548:	4b50      	ldr	r3, [pc, #320]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	494d      	ldr	r1, [pc, #308]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	4313      	orrs	r3, r2
 8001558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d044      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d107      	bne.n	800157e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156e:	4b47      	ldr	r3, [pc, #284]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d119      	bne.n	80015ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e07f      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d003      	beq.n	800158e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800158a:	2b03      	cmp	r3, #3
 800158c:	d107      	bne.n	800159e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158e:	4b3f      	ldr	r3, [pc, #252]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d109      	bne.n	80015ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e06f      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159e:	4b3b      	ldr	r3, [pc, #236]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e067      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ae:	4b37      	ldr	r3, [pc, #220]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f023 0203 	bic.w	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4934      	ldr	r1, [pc, #208]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015c0:	f7ff fc7e 	bl	8000ec0 <HAL_GetTick>
 80015c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c6:	e00a      	b.n	80015de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c8:	f7ff fc7a 	bl	8000ec0 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e04f      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015de:	4b2b      	ldr	r3, [pc, #172]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 020c 	and.w	r2, r3, #12
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d1eb      	bne.n	80015c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015f0:	4b25      	ldr	r3, [pc, #148]	@ (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 030f 	and.w	r3, r3, #15
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d20c      	bcs.n	8001618 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fe:	4b22      	ldr	r3, [pc, #136]	@ (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001606:	4b20      	ldr	r3, [pc, #128]	@ (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d001      	beq.n	8001618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e032      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d008      	beq.n	8001636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001624:	4b19      	ldr	r3, [pc, #100]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	4916      	ldr	r1, [pc, #88]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	4313      	orrs	r3, r2
 8001634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d009      	beq.n	8001656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001642:	4b12      	ldr	r3, [pc, #72]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	490e      	ldr	r1, [pc, #56]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	4313      	orrs	r3, r2
 8001654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001656:	f000 f855 	bl	8001704 <HAL_RCC_GetSysClockFreq>
 800165a:	4602      	mov	r2, r0
 800165c:	4b0b      	ldr	r3, [pc, #44]	@ (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	490a      	ldr	r1, [pc, #40]	@ (8001690 <HAL_RCC_ClockConfig+0x1c0>)
 8001668:	5ccb      	ldrb	r3, [r1, r3]
 800166a:	fa22 f303 	lsr.w	r3, r2, r3
 800166e:	4a09      	ldr	r2, [pc, #36]	@ (8001694 <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001672:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <HAL_RCC_ClockConfig+0x1c8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fbde 	bl	8000e38 <HAL_InitTick>

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023c00 	.word	0x40023c00
 800168c:	40023800 	.word	0x40023800
 8001690:	08003548 	.word	0x08003548
 8001694:	20000000 	.word	0x20000000
 8001698:	20000004 	.word	0x20000004

0800169c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016a0:	4b03      	ldr	r3, [pc, #12]	@ (80016b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80016a2:	681b      	ldr	r3, [r3, #0]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	20000000 	.word	0x20000000

080016b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016b8:	f7ff fff0 	bl	800169c <HAL_RCC_GetHCLKFreq>
 80016bc:	4602      	mov	r2, r0
 80016be:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	0a9b      	lsrs	r3, r3, #10
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	4903      	ldr	r1, [pc, #12]	@ (80016d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016ca:	5ccb      	ldrb	r3, [r1, r3]
 80016cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40023800 	.word	0x40023800
 80016d8:	08003558 	.word	0x08003558

080016dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016e0:	f7ff ffdc 	bl	800169c <HAL_RCC_GetHCLKFreq>
 80016e4:	4602      	mov	r2, r0
 80016e6:	4b05      	ldr	r3, [pc, #20]	@ (80016fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	0b5b      	lsrs	r3, r3, #13
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	4903      	ldr	r1, [pc, #12]	@ (8001700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016f2:	5ccb      	ldrb	r3, [r1, r3]
 80016f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40023800 	.word	0x40023800
 8001700:	08003558 	.word	0x08003558

08001704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001708:	b0a6      	sub	sp, #152	@ 0x98
 800170a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8001712:	2300      	movs	r3, #0
 8001714:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800171e:	2300      	movs	r3, #0
 8001720:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800172a:	4bc8      	ldr	r3, [pc, #800]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x348>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b0c      	cmp	r3, #12
 8001734:	f200 817e 	bhi.w	8001a34 <HAL_RCC_GetSysClockFreq+0x330>
 8001738:	a201      	add	r2, pc, #4	@ (adr r2, 8001740 <HAL_RCC_GetSysClockFreq+0x3c>)
 800173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173e:	bf00      	nop
 8001740:	08001775 	.word	0x08001775
 8001744:	08001a35 	.word	0x08001a35
 8001748:	08001a35 	.word	0x08001a35
 800174c:	08001a35 	.word	0x08001a35
 8001750:	0800177d 	.word	0x0800177d
 8001754:	08001a35 	.word	0x08001a35
 8001758:	08001a35 	.word	0x08001a35
 800175c:	08001a35 	.word	0x08001a35
 8001760:	08001785 	.word	0x08001785
 8001764:	08001a35 	.word	0x08001a35
 8001768:	08001a35 	.word	0x08001a35
 800176c:	08001a35 	.word	0x08001a35
 8001770:	080018ef 	.word	0x080018ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001774:	4bb6      	ldr	r3, [pc, #728]	@ (8001a50 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001776:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800177a:	e15f      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800177c:	4bb5      	ldr	r3, [pc, #724]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0x350>)
 800177e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001782:	e15b      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001784:	4bb1      	ldr	r3, [pc, #708]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800178c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001790:	4bae      	ldr	r3, [pc, #696]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d031      	beq.n	8001800 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800179c:	4bab      	ldr	r3, [pc, #684]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x348>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	099b      	lsrs	r3, r3, #6
 80017a2:	2200      	movs	r2, #0
 80017a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80017a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80017a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80017aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80017b0:	2300      	movs	r3, #0
 80017b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80017b4:	4ba7      	ldr	r3, [pc, #668]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0x350>)
 80017b6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80017ba:	462a      	mov	r2, r5
 80017bc:	fb03 f202 	mul.w	r2, r3, r2
 80017c0:	2300      	movs	r3, #0
 80017c2:	4621      	mov	r1, r4
 80017c4:	fb01 f303 	mul.w	r3, r1, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	4aa2      	ldr	r2, [pc, #648]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0x350>)
 80017cc:	4621      	mov	r1, r4
 80017ce:	fba1 1202 	umull	r1, r2, r1, r2
 80017d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80017d4:	460a      	mov	r2, r1
 80017d6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80017d8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80017da:	4413      	add	r3, r2
 80017dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80017de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80017e2:	2200      	movs	r2, #0
 80017e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80017e6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80017e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80017ec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80017f0:	f7fe fd08 	bl	8000204 <__aeabi_uldivmod>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4613      	mov	r3, r2
 80017fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80017fe:	e064      	b.n	80018ca <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001800:	4b92      	ldr	r3, [pc, #584]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	099b      	lsrs	r3, r3, #6
 8001806:	2200      	movs	r2, #0
 8001808:	653b      	str	r3, [r7, #80]	@ 0x50
 800180a:	657a      	str	r2, [r7, #84]	@ 0x54
 800180c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800180e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001812:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001814:	2300      	movs	r3, #0
 8001816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001818:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800181c:	4622      	mov	r2, r4
 800181e:	462b      	mov	r3, r5
 8001820:	f04f 0000 	mov.w	r0, #0
 8001824:	f04f 0100 	mov.w	r1, #0
 8001828:	0159      	lsls	r1, r3, #5
 800182a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800182e:	0150      	lsls	r0, r2, #5
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4621      	mov	r1, r4
 8001836:	1a51      	subs	r1, r2, r1
 8001838:	6139      	str	r1, [r7, #16]
 800183a:	4629      	mov	r1, r5
 800183c:	eb63 0301 	sbc.w	r3, r3, r1
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800184e:	4659      	mov	r1, fp
 8001850:	018b      	lsls	r3, r1, #6
 8001852:	4651      	mov	r1, sl
 8001854:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001858:	4651      	mov	r1, sl
 800185a:	018a      	lsls	r2, r1, #6
 800185c:	4651      	mov	r1, sl
 800185e:	ebb2 0801 	subs.w	r8, r2, r1
 8001862:	4659      	mov	r1, fp
 8001864:	eb63 0901 	sbc.w	r9, r3, r1
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	f04f 0300 	mov.w	r3, #0
 8001870:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001874:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001878:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800187c:	4690      	mov	r8, r2
 800187e:	4699      	mov	r9, r3
 8001880:	4623      	mov	r3, r4
 8001882:	eb18 0303 	adds.w	r3, r8, r3
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	462b      	mov	r3, r5
 800188a:	eb49 0303 	adc.w	r3, r9, r3
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800189c:	4629      	mov	r1, r5
 800189e:	028b      	lsls	r3, r1, #10
 80018a0:	4621      	mov	r1, r4
 80018a2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018a6:	4621      	mov	r1, r4
 80018a8:	028a      	lsls	r2, r1, #10
 80018aa:	4610      	mov	r0, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018b2:	2200      	movs	r2, #0
 80018b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80018b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80018b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80018bc:	f7fe fca2 	bl	8000204 <__aeabi_uldivmod>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4613      	mov	r3, r2
 80018c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018ca:	4b60      	ldr	r3, [pc, #384]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x348>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	0c1b      	lsrs	r3, r3, #16
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	3301      	adds	r3, #1
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80018dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80018e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80018e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80018ec:	e0a6      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018ee:	4b57      	ldr	r3, [pc, #348]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x348>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018fa:	4b54      	ldr	r3, [pc, #336]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x348>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d02a      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001906:	4b51      	ldr	r3, [pc, #324]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	099b      	lsrs	r3, r3, #6
 800190c:	2200      	movs	r2, #0
 800190e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001910:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001914:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001918:	2100      	movs	r1, #0
 800191a:	4b4e      	ldr	r3, [pc, #312]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0x350>)
 800191c:	fb03 f201 	mul.w	r2, r3, r1
 8001920:	2300      	movs	r3, #0
 8001922:	fb00 f303 	mul.w	r3, r0, r3
 8001926:	4413      	add	r3, r2
 8001928:	4a4a      	ldr	r2, [pc, #296]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0x350>)
 800192a:	fba0 1202 	umull	r1, r2, r0, r2
 800192e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001930:	460a      	mov	r2, r1
 8001932:	673a      	str	r2, [r7, #112]	@ 0x70
 8001934:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001936:	4413      	add	r3, r2
 8001938:	677b      	str	r3, [r7, #116]	@ 0x74
 800193a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800193e:	2200      	movs	r2, #0
 8001940:	633b      	str	r3, [r7, #48]	@ 0x30
 8001942:	637a      	str	r2, [r7, #52]	@ 0x34
 8001944:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001948:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800194c:	f7fe fc5a 	bl	8000204 <__aeabi_uldivmod>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4613      	mov	r3, r2
 8001956:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800195a:	e05b      	b.n	8001a14 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195c:	4b3b      	ldr	r3, [pc, #236]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x348>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	099b      	lsrs	r3, r3, #6
 8001962:	2200      	movs	r2, #0
 8001964:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001966:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800196a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800196e:	623b      	str	r3, [r7, #32]
 8001970:	2300      	movs	r3, #0
 8001972:	627b      	str	r3, [r7, #36]	@ 0x24
 8001974:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001978:	4642      	mov	r2, r8
 800197a:	464b      	mov	r3, r9
 800197c:	f04f 0000 	mov.w	r0, #0
 8001980:	f04f 0100 	mov.w	r1, #0
 8001984:	0159      	lsls	r1, r3, #5
 8001986:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800198a:	0150      	lsls	r0, r2, #5
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4641      	mov	r1, r8
 8001992:	ebb2 0a01 	subs.w	sl, r2, r1
 8001996:	4649      	mov	r1, r9
 8001998:	eb63 0b01 	sbc.w	fp, r3, r1
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019b0:	ebb2 040a 	subs.w	r4, r2, sl
 80019b4:	eb63 050b 	sbc.w	r5, r3, fp
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	00eb      	lsls	r3, r5, #3
 80019c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019c6:	00e2      	lsls	r2, r4, #3
 80019c8:	4614      	mov	r4, r2
 80019ca:	461d      	mov	r5, r3
 80019cc:	4643      	mov	r3, r8
 80019ce:	18e3      	adds	r3, r4, r3
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	464b      	mov	r3, r9
 80019d4:	eb45 0303 	adc.w	r3, r5, r3
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019e6:	4629      	mov	r1, r5
 80019e8:	028b      	lsls	r3, r1, #10
 80019ea:	4621      	mov	r1, r4
 80019ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019f0:	4621      	mov	r1, r4
 80019f2:	028a      	lsls	r2, r1, #10
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80019fc:	2200      	movs	r2, #0
 80019fe:	61bb      	str	r3, [r7, #24]
 8001a00:	61fa      	str	r2, [r7, #28]
 8001a02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a06:	f7fe fbfd 	bl	8000204 <__aeabi_uldivmod>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4613      	mov	r3, r2
 8001a10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a14:	4b0d      	ldr	r3, [pc, #52]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x348>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	0f1b      	lsrs	r3, r3, #28
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001a22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001a26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001a32:	e003      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a34:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001a36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001a3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3798      	adds	r7, #152	@ 0x98
 8001a44:	46bd      	mov	sp, r7
 8001a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	00f42400 	.word	0x00f42400
 8001a54:	017d7840 	.word	0x017d7840

08001a58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e28d      	b.n	8001f86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 8083 	beq.w	8001b7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a78:	4b94      	ldr	r3, [pc, #592]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d019      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a84:	4b91      	ldr	r3, [pc, #580]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d106      	bne.n	8001a9e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a90:	4b8e      	ldr	r3, [pc, #568]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a9c:	d00c      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a9e:	4b8b      	ldr	r3, [pc, #556]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001aa6:	2b0c      	cmp	r3, #12
 8001aa8:	d112      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aaa:	4b88      	ldr	r3, [pc, #544]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ab2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ab6:	d10b      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab8:	4b84      	ldr	r3, [pc, #528]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d05b      	beq.n	8001b7c <HAL_RCC_OscConfig+0x124>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d157      	bne.n	8001b7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e25a      	b.n	8001f86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ad8:	d106      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x90>
 8001ada:	4b7c      	ldr	r3, [pc, #496]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a7b      	ldr	r2, [pc, #492]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e01d      	b.n	8001b24 <HAL_RCC_OscConfig+0xcc>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001af0:	d10c      	bne.n	8001b0c <HAL_RCC_OscConfig+0xb4>
 8001af2:	4b76      	ldr	r3, [pc, #472]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a75      	ldr	r2, [pc, #468]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001af8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	4b73      	ldr	r3, [pc, #460]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a72      	ldr	r2, [pc, #456]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	e00b      	b.n	8001b24 <HAL_RCC_OscConfig+0xcc>
 8001b0c:	4b6f      	ldr	r3, [pc, #444]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a6e      	ldr	r2, [pc, #440]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001b12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b6c      	ldr	r3, [pc, #432]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a6b      	ldr	r2, [pc, #428]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001b1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d013      	beq.n	8001b54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7ff f9c8 	bl	8000ec0 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b34:	f7ff f9c4 	bl	8000ec0 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	@ 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e21f      	b.n	8001f86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	4b61      	ldr	r3, [pc, #388]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0xdc>
 8001b52:	e014      	b.n	8001b7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7ff f9b4 	bl	8000ec0 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7ff f9b0 	bl	8000ec0 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	@ 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e20b      	b.n	8001f86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6e:	4b57      	ldr	r3, [pc, #348]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0x104>
 8001b7a:	e000      	b.n	8001b7e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d06f      	beq.n	8001c6a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b8a:	4b50      	ldr	r3, [pc, #320]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d017      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b96:	4b4d      	ldr	r3, [pc, #308]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d105      	bne.n	8001bae <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00b      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bae:	4b47      	ldr	r3, [pc, #284]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001bb6:	2b0c      	cmp	r3, #12
 8001bb8:	d11c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bba:	4b44      	ldr	r3, [pc, #272]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d116      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc6:	4b41      	ldr	r3, [pc, #260]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <HAL_RCC_OscConfig+0x186>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d001      	beq.n	8001bde <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e1d3      	b.n	8001f86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bde:	4b3b      	ldr	r3, [pc, #236]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4937      	ldr	r1, [pc, #220]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf2:	e03a      	b.n	8001c6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d020      	beq.n	8001c3e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bfc:	4b34      	ldr	r3, [pc, #208]	@ (8001cd0 <HAL_RCC_OscConfig+0x278>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c02:	f7ff f95d 	bl	8000ec0 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0a:	f7ff f959 	bl	8000ec0 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e1b4      	b.n	8001f86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c28:	4b28      	ldr	r3, [pc, #160]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4925      	ldr	r1, [pc, #148]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]
 8001c3c:	e015      	b.n	8001c6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3e:	4b24      	ldr	r3, [pc, #144]	@ (8001cd0 <HAL_RCC_OscConfig+0x278>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c44:	f7ff f93c 	bl	8000ec0 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c4c:	f7ff f938 	bl	8000ec0 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e193      	b.n	8001f86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d036      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d016      	beq.n	8001cac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7e:	4b15      	ldr	r3, [pc, #84]	@ (8001cd4 <HAL_RCC_OscConfig+0x27c>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c84:	f7ff f91c 	bl	8000ec0 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c8c:	f7ff f918 	bl	8000ec0 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e173      	b.n	8001f86 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ccc <HAL_RCC_OscConfig+0x274>)
 8001ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x234>
 8001caa:	e01b      	b.n	8001ce4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cac:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <HAL_RCC_OscConfig+0x27c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb2:	f7ff f905 	bl	8000ec0 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb8:	e00e      	b.n	8001cd8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cba:	f7ff f901 	bl	8000ec0 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d907      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e15c      	b.n	8001f86 <HAL_RCC_OscConfig+0x52e>
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	42470000 	.word	0x42470000
 8001cd4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd8:	4b8a      	ldr	r3, [pc, #552]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1ea      	bne.n	8001cba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 8097 	beq.w	8001e20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf6:	4b83      	ldr	r3, [pc, #524]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10f      	bne.n	8001d22 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	4b7f      	ldr	r3, [pc, #508]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	4a7e      	ldr	r2, [pc, #504]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d12:	4b7c      	ldr	r3, [pc, #496]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d22:	4b79      	ldr	r3, [pc, #484]	@ (8001f08 <HAL_RCC_OscConfig+0x4b0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d118      	bne.n	8001d60 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d2e:	4b76      	ldr	r3, [pc, #472]	@ (8001f08 <HAL_RCC_OscConfig+0x4b0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a75      	ldr	r2, [pc, #468]	@ (8001f08 <HAL_RCC_OscConfig+0x4b0>)
 8001d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3a:	f7ff f8c1 	bl	8000ec0 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d42:	f7ff f8bd 	bl	8000ec0 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e118      	b.n	8001f86 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	4b6c      	ldr	r3, [pc, #432]	@ (8001f08 <HAL_RCC_OscConfig+0x4b0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x31e>
 8001d68:	4b66      	ldr	r3, [pc, #408]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6c:	4a65      	ldr	r2, [pc, #404]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d74:	e01c      	b.n	8001db0 <HAL_RCC_OscConfig+0x358>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b05      	cmp	r3, #5
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x340>
 8001d7e:	4b61      	ldr	r3, [pc, #388]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d82:	4a60      	ldr	r2, [pc, #384]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001d84:	f043 0304 	orr.w	r3, r3, #4
 8001d88:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d8a:	4b5e      	ldr	r3, [pc, #376]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d8e:	4a5d      	ldr	r2, [pc, #372]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d96:	e00b      	b.n	8001db0 <HAL_RCC_OscConfig+0x358>
 8001d98:	4b5a      	ldr	r3, [pc, #360]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d9c:	4a59      	ldr	r2, [pc, #356]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001d9e:	f023 0301 	bic.w	r3, r3, #1
 8001da2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001da4:	4b57      	ldr	r3, [pc, #348]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da8:	4a56      	ldr	r2, [pc, #344]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001daa:	f023 0304 	bic.w	r3, r3, #4
 8001dae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d015      	beq.n	8001de4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db8:	f7ff f882 	bl	8000ec0 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dbe:	e00a      	b.n	8001dd6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc0:	f7ff f87e 	bl	8000ec0 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e0d7      	b.n	8001f86 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd6:	4b4b      	ldr	r3, [pc, #300]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0ee      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x368>
 8001de2:	e014      	b.n	8001e0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de4:	f7ff f86c 	bl	8000ec0 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dea:	e00a      	b.n	8001e02 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dec:	f7ff f868 	bl	8000ec0 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e0c1      	b.n	8001f86 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e02:	4b40      	ldr	r3, [pc, #256]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1ee      	bne.n	8001dec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d105      	bne.n	8001e20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e14:	4b3b      	ldr	r3, [pc, #236]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e18:	4a3a      	ldr	r2, [pc, #232]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001e1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80ad 	beq.w	8001f84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e2a:	4b36      	ldr	r3, [pc, #216]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d060      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d145      	bne.n	8001eca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	4b33      	ldr	r3, [pc, #204]	@ (8001f0c <HAL_RCC_OscConfig+0x4b4>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7ff f83c 	bl	8000ec0 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7ff f838 	bl	8000ec0 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e093      	b.n	8001f86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5e:	4b29      	ldr	r3, [pc, #164]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69da      	ldr	r2, [r3, #28]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e78:	019b      	lsls	r3, r3, #6
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e80:	085b      	lsrs	r3, r3, #1
 8001e82:	3b01      	subs	r3, #1
 8001e84:	041b      	lsls	r3, r3, #16
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e8c:	061b      	lsls	r3, r3, #24
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e94:	071b      	lsls	r3, r3, #28
 8001e96:	491b      	ldr	r1, [pc, #108]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f0c <HAL_RCC_OscConfig+0x4b4>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea2:	f7ff f80d 	bl	8000ec0 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eaa:	f7ff f809 	bl	8000ec0 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e064      	b.n	8001f86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ebc:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x452>
 8001ec8:	e05c      	b.n	8001f84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eca:	4b10      	ldr	r3, [pc, #64]	@ (8001f0c <HAL_RCC_OscConfig+0x4b4>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed0:	f7fe fff6 	bl	8000ec0 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed8:	f7fe fff2 	bl	8000ec0 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e04d      	b.n	8001f86 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eea:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <HAL_RCC_OscConfig+0x4ac>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x480>
 8001ef6:	e045      	b.n	8001f84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d107      	bne.n	8001f10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e040      	b.n	8001f86 <HAL_RCC_OscConfig+0x52e>
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40007000 	.word	0x40007000
 8001f0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f10:	4b1f      	ldr	r3, [pc, #124]	@ (8001f90 <HAL_RCC_OscConfig+0x538>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d030      	beq.n	8001f80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d129      	bne.n	8001f80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d122      	bne.n	8001f80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f40:	4013      	ands	r3, r2
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d119      	bne.n	8001f80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f56:	085b      	lsrs	r3, r3, #1
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d10f      	bne.n	8001f80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d107      	bne.n	8001f80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d001      	beq.n	8001f84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800

08001f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e041      	b.n	800202a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d106      	bne.n	8001fc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7fe fdc4 	bl	8000b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3304      	adds	r3, #4
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	f000 fae0 	bl	8002598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d001      	beq.n	800204c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e046      	b.n	80020da <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a23      	ldr	r2, [pc, #140]	@ (80020e8 <HAL_TIM_Base_Start+0xb4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d022      	beq.n	80020a4 <HAL_TIM_Base_Start+0x70>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002066:	d01d      	beq.n	80020a4 <HAL_TIM_Base_Start+0x70>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a1f      	ldr	r2, [pc, #124]	@ (80020ec <HAL_TIM_Base_Start+0xb8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d018      	beq.n	80020a4 <HAL_TIM_Base_Start+0x70>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a1e      	ldr	r2, [pc, #120]	@ (80020f0 <HAL_TIM_Base_Start+0xbc>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d013      	beq.n	80020a4 <HAL_TIM_Base_Start+0x70>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1c      	ldr	r2, [pc, #112]	@ (80020f4 <HAL_TIM_Base_Start+0xc0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00e      	beq.n	80020a4 <HAL_TIM_Base_Start+0x70>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a1b      	ldr	r2, [pc, #108]	@ (80020f8 <HAL_TIM_Base_Start+0xc4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d009      	beq.n	80020a4 <HAL_TIM_Base_Start+0x70>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a19      	ldr	r2, [pc, #100]	@ (80020fc <HAL_TIM_Base_Start+0xc8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d004      	beq.n	80020a4 <HAL_TIM_Base_Start+0x70>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a18      	ldr	r2, [pc, #96]	@ (8002100 <HAL_TIM_Base_Start+0xcc>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d111      	bne.n	80020c8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b06      	cmp	r3, #6
 80020b4:	d010      	beq.n	80020d8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 0201 	orr.w	r2, r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c6:	e007      	b.n	80020d8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40010000 	.word	0x40010000
 80020ec:	40000400 	.word	0x40000400
 80020f0:	40000800 	.word	0x40000800
 80020f4:	40000c00 	.word	0x40000c00
 80020f8:	40010400 	.word	0x40010400
 80020fc:	40014000 	.word	0x40014000
 8002100:	40001800 	.word	0x40001800

08002104 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e041      	b.n	800219a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe fcea 	bl	8000b04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3304      	adds	r3, #4
 8002140:	4619      	mov	r1, r3
 8002142:	4610      	mov	r0, r2
 8002144:	f000 fa28 	bl	8002598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d109      	bne.n	80021c8 <HAL_TIM_PWM_Start+0x24>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b01      	cmp	r3, #1
 80021be:	bf14      	ite	ne
 80021c0:	2301      	movne	r3, #1
 80021c2:	2300      	moveq	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	e022      	b.n	800220e <HAL_TIM_PWM_Start+0x6a>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d109      	bne.n	80021e2 <HAL_TIM_PWM_Start+0x3e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	bf14      	ite	ne
 80021da:	2301      	movne	r3, #1
 80021dc:	2300      	moveq	r3, #0
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	e015      	b.n	800220e <HAL_TIM_PWM_Start+0x6a>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d109      	bne.n	80021fc <HAL_TIM_PWM_Start+0x58>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	bf14      	ite	ne
 80021f4:	2301      	movne	r3, #1
 80021f6:	2300      	moveq	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	e008      	b.n	800220e <HAL_TIM_PWM_Start+0x6a>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b01      	cmp	r3, #1
 8002206:	bf14      	ite	ne
 8002208:	2301      	movne	r3, #1
 800220a:	2300      	moveq	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e07c      	b.n	8002310 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d104      	bne.n	8002226 <HAL_TIM_PWM_Start+0x82>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002224:	e013      	b.n	800224e <HAL_TIM_PWM_Start+0xaa>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2b04      	cmp	r3, #4
 800222a:	d104      	bne.n	8002236 <HAL_TIM_PWM_Start+0x92>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002234:	e00b      	b.n	800224e <HAL_TIM_PWM_Start+0xaa>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b08      	cmp	r3, #8
 800223a:	d104      	bne.n	8002246 <HAL_TIM_PWM_Start+0xa2>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002244:	e003      	b.n	800224e <HAL_TIM_PWM_Start+0xaa>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2202      	movs	r2, #2
 800224a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2201      	movs	r2, #1
 8002254:	6839      	ldr	r1, [r7, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f000 fbfa 	bl	8002a50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a2d      	ldr	r2, [pc, #180]	@ (8002318 <HAL_TIM_PWM_Start+0x174>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d004      	beq.n	8002270 <HAL_TIM_PWM_Start+0xcc>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a2c      	ldr	r2, [pc, #176]	@ (800231c <HAL_TIM_PWM_Start+0x178>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d101      	bne.n	8002274 <HAL_TIM_PWM_Start+0xd0>
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <HAL_TIM_PWM_Start+0xd2>
 8002274:	2300      	movs	r3, #0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d007      	beq.n	800228a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002288:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a22      	ldr	r2, [pc, #136]	@ (8002318 <HAL_TIM_PWM_Start+0x174>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d022      	beq.n	80022da <HAL_TIM_PWM_Start+0x136>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800229c:	d01d      	beq.n	80022da <HAL_TIM_PWM_Start+0x136>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002320 <HAL_TIM_PWM_Start+0x17c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d018      	beq.n	80022da <HAL_TIM_PWM_Start+0x136>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002324 <HAL_TIM_PWM_Start+0x180>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d013      	beq.n	80022da <HAL_TIM_PWM_Start+0x136>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002328 <HAL_TIM_PWM_Start+0x184>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d00e      	beq.n	80022da <HAL_TIM_PWM_Start+0x136>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a16      	ldr	r2, [pc, #88]	@ (800231c <HAL_TIM_PWM_Start+0x178>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d009      	beq.n	80022da <HAL_TIM_PWM_Start+0x136>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a18      	ldr	r2, [pc, #96]	@ (800232c <HAL_TIM_PWM_Start+0x188>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d004      	beq.n	80022da <HAL_TIM_PWM_Start+0x136>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a16      	ldr	r2, [pc, #88]	@ (8002330 <HAL_TIM_PWM_Start+0x18c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d111      	bne.n	80022fe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2b06      	cmp	r3, #6
 80022ea:	d010      	beq.n	800230e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0201 	orr.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fc:	e007      	b.n	800230e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f042 0201 	orr.w	r2, r2, #1
 800230c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40010000 	.word	0x40010000
 800231c:	40010400 	.word	0x40010400
 8002320:	40000400 	.word	0x40000400
 8002324:	40000800 	.word	0x40000800
 8002328:	40000c00 	.word	0x40000c00
 800232c:	40014000 	.word	0x40014000
 8002330:	40001800 	.word	0x40001800

08002334 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2200      	movs	r2, #0
 8002344:	6839      	ldr	r1, [r7, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fb82 	bl	8002a50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a2e      	ldr	r2, [pc, #184]	@ (800240c <HAL_TIM_PWM_Stop+0xd8>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d004      	beq.n	8002360 <HAL_TIM_PWM_Stop+0x2c>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a2d      	ldr	r2, [pc, #180]	@ (8002410 <HAL_TIM_PWM_Stop+0xdc>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d101      	bne.n	8002364 <HAL_TIM_PWM_Stop+0x30>
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <HAL_TIM_PWM_Stop+0x32>
 8002364:	2300      	movs	r3, #0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d017      	beq.n	800239a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6a1a      	ldr	r2, [r3, #32]
 8002370:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002374:	4013      	ands	r3, r2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10f      	bne.n	800239a <HAL_TIM_PWM_Stop+0x66>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a1a      	ldr	r2, [r3, #32]
 8002380:	f240 4344 	movw	r3, #1092	@ 0x444
 8002384:	4013      	ands	r3, r2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d107      	bne.n	800239a <HAL_TIM_PWM_Stop+0x66>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002398:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6a1a      	ldr	r2, [r3, #32]
 80023a0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10f      	bne.n	80023ca <HAL_TIM_PWM_Stop+0x96>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6a1a      	ldr	r2, [r3, #32]
 80023b0:	f240 4344 	movw	r3, #1092	@ 0x444
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d107      	bne.n	80023ca <HAL_TIM_PWM_Stop+0x96>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0201 	bic.w	r2, r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d104      	bne.n	80023da <HAL_TIM_PWM_Stop+0xa6>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023d8:	e013      	b.n	8002402 <HAL_TIM_PWM_Stop+0xce>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d104      	bne.n	80023ea <HAL_TIM_PWM_Stop+0xb6>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023e8:	e00b      	b.n	8002402 <HAL_TIM_PWM_Stop+0xce>
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d104      	bne.n	80023fa <HAL_TIM_PWM_Stop+0xc6>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023f8:	e003      	b.n	8002402 <HAL_TIM_PWM_Stop+0xce>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40010000 	.word	0x40010000
 8002410:	40010400 	.word	0x40010400

08002414 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800242e:	2302      	movs	r3, #2
 8002430:	e0ae      	b.n	8002590 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b0c      	cmp	r3, #12
 800243e:	f200 809f 	bhi.w	8002580 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002442:	a201      	add	r2, pc, #4	@ (adr r2, 8002448 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002448:	0800247d 	.word	0x0800247d
 800244c:	08002581 	.word	0x08002581
 8002450:	08002581 	.word	0x08002581
 8002454:	08002581 	.word	0x08002581
 8002458:	080024bd 	.word	0x080024bd
 800245c:	08002581 	.word	0x08002581
 8002460:	08002581 	.word	0x08002581
 8002464:	08002581 	.word	0x08002581
 8002468:	080024ff 	.word	0x080024ff
 800246c:	08002581 	.word	0x08002581
 8002470:	08002581 	.word	0x08002581
 8002474:	08002581 	.word	0x08002581
 8002478:	0800253f 	.word	0x0800253f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f934 	bl	80026f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699a      	ldr	r2, [r3, #24]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0208 	orr.w	r2, r2, #8
 8002496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699a      	ldr	r2, [r3, #24]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0204 	bic.w	r2, r2, #4
 80024a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6999      	ldr	r1, [r3, #24]
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	619a      	str	r2, [r3, #24]
      break;
 80024ba:	e064      	b.n	8002586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 f984 	bl	80027d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699a      	ldr	r2, [r3, #24]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699a      	ldr	r2, [r3, #24]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6999      	ldr	r1, [r3, #24]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	021a      	lsls	r2, r3, #8
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	619a      	str	r2, [r3, #24]
      break;
 80024fc:	e043      	b.n	8002586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	4618      	mov	r0, r3
 8002506:	f000 f9d9 	bl	80028bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	69da      	ldr	r2, [r3, #28]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0208 	orr.w	r2, r2, #8
 8002518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	69da      	ldr	r2, [r3, #28]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0204 	bic.w	r2, r2, #4
 8002528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	69d9      	ldr	r1, [r3, #28]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	61da      	str	r2, [r3, #28]
      break;
 800253c:	e023      	b.n	8002586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68b9      	ldr	r1, [r7, #8]
 8002544:	4618      	mov	r0, r3
 8002546:	f000 fa2d 	bl	80029a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	69da      	ldr	r2, [r3, #28]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	69da      	ldr	r2, [r3, #28]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	69d9      	ldr	r1, [r3, #28]
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	021a      	lsls	r2, r3, #8
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	61da      	str	r2, [r3, #28]
      break;
 800257e:	e002      	b.n	8002586 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	75fb      	strb	r3, [r7, #23]
      break;
 8002584:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800258e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a46      	ldr	r2, [pc, #280]	@ (80026c4 <TIM_Base_SetConfig+0x12c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d013      	beq.n	80025d8 <TIM_Base_SetConfig+0x40>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025b6:	d00f      	beq.n	80025d8 <TIM_Base_SetConfig+0x40>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a43      	ldr	r2, [pc, #268]	@ (80026c8 <TIM_Base_SetConfig+0x130>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d00b      	beq.n	80025d8 <TIM_Base_SetConfig+0x40>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a42      	ldr	r2, [pc, #264]	@ (80026cc <TIM_Base_SetConfig+0x134>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d007      	beq.n	80025d8 <TIM_Base_SetConfig+0x40>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a41      	ldr	r2, [pc, #260]	@ (80026d0 <TIM_Base_SetConfig+0x138>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d003      	beq.n	80025d8 <TIM_Base_SetConfig+0x40>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a40      	ldr	r2, [pc, #256]	@ (80026d4 <TIM_Base_SetConfig+0x13c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d108      	bne.n	80025ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a35      	ldr	r2, [pc, #212]	@ (80026c4 <TIM_Base_SetConfig+0x12c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d02b      	beq.n	800264a <TIM_Base_SetConfig+0xb2>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025f8:	d027      	beq.n	800264a <TIM_Base_SetConfig+0xb2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a32      	ldr	r2, [pc, #200]	@ (80026c8 <TIM_Base_SetConfig+0x130>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d023      	beq.n	800264a <TIM_Base_SetConfig+0xb2>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a31      	ldr	r2, [pc, #196]	@ (80026cc <TIM_Base_SetConfig+0x134>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d01f      	beq.n	800264a <TIM_Base_SetConfig+0xb2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a30      	ldr	r2, [pc, #192]	@ (80026d0 <TIM_Base_SetConfig+0x138>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d01b      	beq.n	800264a <TIM_Base_SetConfig+0xb2>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a2f      	ldr	r2, [pc, #188]	@ (80026d4 <TIM_Base_SetConfig+0x13c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d017      	beq.n	800264a <TIM_Base_SetConfig+0xb2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a2e      	ldr	r2, [pc, #184]	@ (80026d8 <TIM_Base_SetConfig+0x140>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d013      	beq.n	800264a <TIM_Base_SetConfig+0xb2>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a2d      	ldr	r2, [pc, #180]	@ (80026dc <TIM_Base_SetConfig+0x144>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00f      	beq.n	800264a <TIM_Base_SetConfig+0xb2>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a2c      	ldr	r2, [pc, #176]	@ (80026e0 <TIM_Base_SetConfig+0x148>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00b      	beq.n	800264a <TIM_Base_SetConfig+0xb2>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a2b      	ldr	r2, [pc, #172]	@ (80026e4 <TIM_Base_SetConfig+0x14c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d007      	beq.n	800264a <TIM_Base_SetConfig+0xb2>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a2a      	ldr	r2, [pc, #168]	@ (80026e8 <TIM_Base_SetConfig+0x150>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d003      	beq.n	800264a <TIM_Base_SetConfig+0xb2>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a29      	ldr	r2, [pc, #164]	@ (80026ec <TIM_Base_SetConfig+0x154>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d108      	bne.n	800265c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	4313      	orrs	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a10      	ldr	r2, [pc, #64]	@ (80026c4 <TIM_Base_SetConfig+0x12c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d003      	beq.n	8002690 <TIM_Base_SetConfig+0xf8>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a12      	ldr	r2, [pc, #72]	@ (80026d4 <TIM_Base_SetConfig+0x13c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d103      	bne.n	8002698 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d105      	bne.n	80026b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f023 0201 	bic.w	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	611a      	str	r2, [r3, #16]
  }
}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40010000 	.word	0x40010000
 80026c8:	40000400 	.word	0x40000400
 80026cc:	40000800 	.word	0x40000800
 80026d0:	40000c00 	.word	0x40000c00
 80026d4:	40010400 	.word	0x40010400
 80026d8:	40014000 	.word	0x40014000
 80026dc:	40014400 	.word	0x40014400
 80026e0:	40014800 	.word	0x40014800
 80026e4:	40001800 	.word	0x40001800
 80026e8:	40001c00 	.word	0x40001c00
 80026ec:	40002000 	.word	0x40002000

080026f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f023 0201 	bic.w	r2, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800271e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f023 0303 	bic.w	r3, r3, #3
 8002726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	4313      	orrs	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f023 0302 	bic.w	r3, r3, #2
 8002738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	4313      	orrs	r3, r2
 8002742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a20      	ldr	r2, [pc, #128]	@ (80027c8 <TIM_OC1_SetConfig+0xd8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d003      	beq.n	8002754 <TIM_OC1_SetConfig+0x64>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a1f      	ldr	r2, [pc, #124]	@ (80027cc <TIM_OC1_SetConfig+0xdc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d10c      	bne.n	800276e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f023 0308 	bic.w	r3, r3, #8
 800275a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	4313      	orrs	r3, r2
 8002764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f023 0304 	bic.w	r3, r3, #4
 800276c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a15      	ldr	r2, [pc, #84]	@ (80027c8 <TIM_OC1_SetConfig+0xd8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d003      	beq.n	800277e <TIM_OC1_SetConfig+0x8e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a14      	ldr	r2, [pc, #80]	@ (80027cc <TIM_OC1_SetConfig+0xdc>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d111      	bne.n	80027a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800278c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	621a      	str	r2, [r3, #32]
}
 80027bc:	bf00      	nop
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	40010000 	.word	0x40010000
 80027cc:	40010400 	.word	0x40010400

080027d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f023 0210 	bic.w	r2, r3, #16
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f023 0320 	bic.w	r3, r3, #32
 800281a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	4313      	orrs	r3, r2
 8002826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a22      	ldr	r2, [pc, #136]	@ (80028b4 <TIM_OC2_SetConfig+0xe4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d003      	beq.n	8002838 <TIM_OC2_SetConfig+0x68>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a21      	ldr	r2, [pc, #132]	@ (80028b8 <TIM_OC2_SetConfig+0xe8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d10d      	bne.n	8002854 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800283e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002852:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a17      	ldr	r2, [pc, #92]	@ (80028b4 <TIM_OC2_SetConfig+0xe4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d003      	beq.n	8002864 <TIM_OC2_SetConfig+0x94>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a16      	ldr	r2, [pc, #88]	@ (80028b8 <TIM_OC2_SetConfig+0xe8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d113      	bne.n	800288c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800286a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002872:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	621a      	str	r2, [r3, #32]
}
 80028a6:	bf00      	nop
 80028a8:	371c      	adds	r7, #28
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40010000 	.word	0x40010000
 80028b8:	40010400 	.word	0x40010400

080028bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f023 0303 	bic.w	r3, r3, #3
 80028f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	021b      	lsls	r3, r3, #8
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	4313      	orrs	r3, r2
 8002910:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a21      	ldr	r2, [pc, #132]	@ (800299c <TIM_OC3_SetConfig+0xe0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d003      	beq.n	8002922 <TIM_OC3_SetConfig+0x66>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a20      	ldr	r2, [pc, #128]	@ (80029a0 <TIM_OC3_SetConfig+0xe4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d10d      	bne.n	800293e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	4313      	orrs	r3, r2
 8002934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800293c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a16      	ldr	r2, [pc, #88]	@ (800299c <TIM_OC3_SetConfig+0xe0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d003      	beq.n	800294e <TIM_OC3_SetConfig+0x92>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a15      	ldr	r2, [pc, #84]	@ (80029a0 <TIM_OC3_SetConfig+0xe4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d113      	bne.n	8002976 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800295c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4313      	orrs	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	621a      	str	r2, [r3, #32]
}
 8002990:	bf00      	nop
 8002992:	371c      	adds	r7, #28
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	40010000 	.word	0x40010000
 80029a0:	40010400 	.word	0x40010400

080029a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80029d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80029ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	031b      	lsls	r3, r3, #12
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a12      	ldr	r2, [pc, #72]	@ (8002a48 <TIM_OC4_SetConfig+0xa4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d003      	beq.n	8002a0c <TIM_OC4_SetConfig+0x68>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a11      	ldr	r2, [pc, #68]	@ (8002a4c <TIM_OC4_SetConfig+0xa8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d109      	bne.n	8002a20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	019b      	lsls	r3, r3, #6
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	621a      	str	r2, [r3, #32]
}
 8002a3a:	bf00      	nop
 8002a3c:	371c      	adds	r7, #28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40010000 	.word	0x40010000
 8002a4c:	40010400 	.word	0x40010400

08002a50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f003 031f 	and.w	r3, r3, #31
 8002a62:	2201      	movs	r2, #1
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a1a      	ldr	r2, [r3, #32]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	401a      	ands	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a1a      	ldr	r2, [r3, #32]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	fa01 f303 	lsl.w	r3, r1, r3
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	621a      	str	r2, [r3, #32]
}
 8002a8e:	bf00      	nop
 8002a90:	371c      	adds	r7, #28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e05a      	b.n	8002b6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ada:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a21      	ldr	r2, [pc, #132]	@ (8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d022      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b00:	d01d      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1d      	ldr	r2, [pc, #116]	@ (8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d018      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1b      	ldr	r2, [pc, #108]	@ (8002b80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d013      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8002b84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d00e      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a18      	ldr	r2, [pc, #96]	@ (8002b88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d009      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a17      	ldr	r2, [pc, #92]	@ (8002b8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d004      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a15      	ldr	r2, [pc, #84]	@ (8002b90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d10c      	bne.n	8002b58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40010000 	.word	0x40010000
 8002b7c:	40000400 	.word	0x40000400
 8002b80:	40000800 	.word	0x40000800
 8002b84:	40000c00 	.word	0x40000c00
 8002b88:	40010400 	.word	0x40010400
 8002b8c:	40014000 	.word	0x40014000
 8002b90:	40001800 	.word	0x40001800

08002b94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e042      	b.n	8002c2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fe f874 	bl	8000ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2224      	movs	r2, #36	@ 0x24
 8002bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 fa09 	bl	8002ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695a      	ldr	r2, [r3, #20]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	@ 0x28
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b20      	cmp	r3, #32
 8002c52:	d175      	bne.n	8002d40 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <HAL_UART_Transmit+0x2c>
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e06e      	b.n	8002d42 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2221      	movs	r2, #33	@ 0x21
 8002c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c72:	f7fe f925 	bl	8000ec0 <HAL_GetTick>
 8002c76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	88fa      	ldrh	r2, [r7, #6]
 8002c7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	88fa      	ldrh	r2, [r7, #6]
 8002c82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c8c:	d108      	bne.n	8002ca0 <HAL_UART_Transmit+0x6c>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d104      	bne.n	8002ca0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	e003      	b.n	8002ca8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ca8:	e02e      	b.n	8002d08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2180      	movs	r1, #128	@ 0x80
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 f8df 	bl	8002e78 <UART_WaitOnFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e03a      	b.n	8002d42 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10b      	bne.n	8002cea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ce0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	3302      	adds	r3, #2
 8002ce6:	61bb      	str	r3, [r7, #24]
 8002ce8:	e007      	b.n	8002cfa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	781a      	ldrb	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1cb      	bne.n	8002caa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2140      	movs	r1, #64	@ 0x40
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f8ab 	bl	8002e78 <UART_WaitOnFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e006      	b.n	8002d42 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e000      	b.n	8002d42 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d40:	2302      	movs	r3, #2
  }
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3720      	adds	r7, #32
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b08a      	sub	sp, #40	@ 0x28
 8002d4e:	af02      	add	r7, sp, #8
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	603b      	str	r3, [r7, #0]
 8002d56:	4613      	mov	r3, r2
 8002d58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	f040 8081 	bne.w	8002e6e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <HAL_UART_Receive+0x2e>
 8002d72:	88fb      	ldrh	r3, [r7, #6]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e079      	b.n	8002e70 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2222      	movs	r2, #34	@ 0x22
 8002d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d90:	f7fe f896 	bl	8000ec0 <HAL_GetTick>
 8002d94:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	88fa      	ldrh	r2, [r7, #6]
 8002d9a:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	88fa      	ldrh	r2, [r7, #6]
 8002da0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002daa:	d108      	bne.n	8002dbe <HAL_UART_Receive+0x74>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d104      	bne.n	8002dbe <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	e003      	b.n	8002dc6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002dc6:	e047      	b.n	8002e58 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2120      	movs	r1, #32
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f850 	bl	8002e78 <UART_WaitOnFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d005      	beq.n	8002dea <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e042      	b.n	8002e70 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10c      	bne.n	8002e0a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	3302      	adds	r3, #2
 8002e06:	61bb      	str	r3, [r7, #24]
 8002e08:	e01f      	b.n	8002e4a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e12:	d007      	beq.n	8002e24 <HAL_UART_Receive+0xda>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10a      	bne.n	8002e32 <HAL_UART_Receive+0xe8>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d106      	bne.n	8002e32 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	701a      	strb	r2, [r3, #0]
 8002e30:	e008      	b.n	8002e44 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	3301      	adds	r3, #1
 8002e48:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1b2      	bne.n	8002dc8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	e000      	b.n	8002e70 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002e6e:	2302      	movs	r3, #2
  }
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3720      	adds	r7, #32
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	603b      	str	r3, [r7, #0]
 8002e84:	4613      	mov	r3, r2
 8002e86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e88:	e03b      	b.n	8002f02 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d037      	beq.n	8002f02 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e92:	f7fe f815 	bl	8000ec0 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	6a3a      	ldr	r2, [r7, #32]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d302      	bcc.n	8002ea8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e03a      	b.n	8002f22 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d023      	beq.n	8002f02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2b80      	cmp	r3, #128	@ 0x80
 8002ebe:	d020      	beq.n	8002f02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b40      	cmp	r3, #64	@ 0x40
 8002ec4:	d01d      	beq.n	8002f02 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d116      	bne.n	8002f02 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f81d 	bl	8002f2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2208      	movs	r2, #8
 8002ef4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e00f      	b.n	8002f22 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	bf0c      	ite	eq
 8002f12:	2301      	moveq	r3, #1
 8002f14:	2300      	movne	r3, #0
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	461a      	mov	r2, r3
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d0b4      	beq.n	8002e8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b095      	sub	sp, #84	@ 0x54
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	330c      	adds	r3, #12
 8002f38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f3c:	e853 3f00 	ldrex	r3, [r3]
 8002f40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	330c      	adds	r3, #12
 8002f50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f52:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f5a:	e841 2300 	strex	r3, r2, [r1]
 8002f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1e5      	bne.n	8002f32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3314      	adds	r3, #20
 8002f6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	e853 3f00 	ldrex	r3, [r3]
 8002f74:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	f023 0301 	bic.w	r3, r3, #1
 8002f7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3314      	adds	r3, #20
 8002f84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f8e:	e841 2300 	strex	r3, r2, [r1]
 8002f92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1e5      	bne.n	8002f66 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d119      	bne.n	8002fd6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	330c      	adds	r3, #12
 8002fa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	e853 3f00 	ldrex	r3, [r3]
 8002fb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f023 0310 	bic.w	r3, r3, #16
 8002fb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	330c      	adds	r3, #12
 8002fc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002fc2:	61ba      	str	r2, [r7, #24]
 8002fc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc6:	6979      	ldr	r1, [r7, #20]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	e841 2300 	strex	r3, r2, [r1]
 8002fce:	613b      	str	r3, [r7, #16]
   return(result);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1e5      	bne.n	8002fa2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002fe4:	bf00      	nop
 8002fe6:	3754      	adds	r7, #84	@ 0x54
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff4:	b0c0      	sub	sp, #256	@ 0x100
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800300c:	68d9      	ldr	r1, [r3, #12]
 800300e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	ea40 0301 	orr.w	r3, r0, r1
 8003018:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800301a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	431a      	orrs	r2, r3
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	431a      	orrs	r2, r3
 8003030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800303c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003048:	f021 010c 	bic.w	r1, r1, #12
 800304c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003056:	430b      	orrs	r3, r1
 8003058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800305a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800306a:	6999      	ldr	r1, [r3, #24]
 800306c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	ea40 0301 	orr.w	r3, r0, r1
 8003076:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	4b8f      	ldr	r3, [pc, #572]	@ (80032bc <UART_SetConfig+0x2cc>)
 8003080:	429a      	cmp	r2, r3
 8003082:	d005      	beq.n	8003090 <UART_SetConfig+0xa0>
 8003084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	4b8d      	ldr	r3, [pc, #564]	@ (80032c0 <UART_SetConfig+0x2d0>)
 800308c:	429a      	cmp	r2, r3
 800308e:	d104      	bne.n	800309a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003090:	f7fe fb24 	bl	80016dc <HAL_RCC_GetPCLK2Freq>
 8003094:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003098:	e003      	b.n	80030a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800309a:	f7fe fb0b 	bl	80016b4 <HAL_RCC_GetPCLK1Freq>
 800309e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030ac:	f040 810c 	bne.w	80032c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030b4:	2200      	movs	r2, #0
 80030b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80030ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80030be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80030c2:	4622      	mov	r2, r4
 80030c4:	462b      	mov	r3, r5
 80030c6:	1891      	adds	r1, r2, r2
 80030c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80030ca:	415b      	adcs	r3, r3
 80030cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030d2:	4621      	mov	r1, r4
 80030d4:	eb12 0801 	adds.w	r8, r2, r1
 80030d8:	4629      	mov	r1, r5
 80030da:	eb43 0901 	adc.w	r9, r3, r1
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030f2:	4690      	mov	r8, r2
 80030f4:	4699      	mov	r9, r3
 80030f6:	4623      	mov	r3, r4
 80030f8:	eb18 0303 	adds.w	r3, r8, r3
 80030fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003100:	462b      	mov	r3, r5
 8003102:	eb49 0303 	adc.w	r3, r9, r3
 8003106:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800310a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003116:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800311a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800311e:	460b      	mov	r3, r1
 8003120:	18db      	adds	r3, r3, r3
 8003122:	653b      	str	r3, [r7, #80]	@ 0x50
 8003124:	4613      	mov	r3, r2
 8003126:	eb42 0303 	adc.w	r3, r2, r3
 800312a:	657b      	str	r3, [r7, #84]	@ 0x54
 800312c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003130:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003134:	f7fd f866 	bl	8000204 <__aeabi_uldivmod>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4b61      	ldr	r3, [pc, #388]	@ (80032c4 <UART_SetConfig+0x2d4>)
 800313e:	fba3 2302 	umull	r2, r3, r3, r2
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	011c      	lsls	r4, r3, #4
 8003146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800314a:	2200      	movs	r2, #0
 800314c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003150:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003154:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003158:	4642      	mov	r2, r8
 800315a:	464b      	mov	r3, r9
 800315c:	1891      	adds	r1, r2, r2
 800315e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003160:	415b      	adcs	r3, r3
 8003162:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003164:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003168:	4641      	mov	r1, r8
 800316a:	eb12 0a01 	adds.w	sl, r2, r1
 800316e:	4649      	mov	r1, r9
 8003170:	eb43 0b01 	adc.w	fp, r3, r1
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003180:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003188:	4692      	mov	sl, r2
 800318a:	469b      	mov	fp, r3
 800318c:	4643      	mov	r3, r8
 800318e:	eb1a 0303 	adds.w	r3, sl, r3
 8003192:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003196:	464b      	mov	r3, r9
 8003198:	eb4b 0303 	adc.w	r3, fp, r3
 800319c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80031b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80031b4:	460b      	mov	r3, r1
 80031b6:	18db      	adds	r3, r3, r3
 80031b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80031ba:	4613      	mov	r3, r2
 80031bc:	eb42 0303 	adc.w	r3, r2, r3
 80031c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80031c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80031c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80031ca:	f7fd f81b 	bl	8000204 <__aeabi_uldivmod>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4611      	mov	r1, r2
 80031d4:	4b3b      	ldr	r3, [pc, #236]	@ (80032c4 <UART_SetConfig+0x2d4>)
 80031d6:	fba3 2301 	umull	r2, r3, r3, r1
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	2264      	movs	r2, #100	@ 0x64
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	1acb      	subs	r3, r1, r3
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80031ea:	4b36      	ldr	r3, [pc, #216]	@ (80032c4 <UART_SetConfig+0x2d4>)
 80031ec:	fba3 2302 	umull	r2, r3, r3, r2
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80031f8:	441c      	add	r4, r3
 80031fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031fe:	2200      	movs	r2, #0
 8003200:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003204:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003208:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800320c:	4642      	mov	r2, r8
 800320e:	464b      	mov	r3, r9
 8003210:	1891      	adds	r1, r2, r2
 8003212:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003214:	415b      	adcs	r3, r3
 8003216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003218:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800321c:	4641      	mov	r1, r8
 800321e:	1851      	adds	r1, r2, r1
 8003220:	6339      	str	r1, [r7, #48]	@ 0x30
 8003222:	4649      	mov	r1, r9
 8003224:	414b      	adcs	r3, r1
 8003226:	637b      	str	r3, [r7, #52]	@ 0x34
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003234:	4659      	mov	r1, fp
 8003236:	00cb      	lsls	r3, r1, #3
 8003238:	4651      	mov	r1, sl
 800323a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800323e:	4651      	mov	r1, sl
 8003240:	00ca      	lsls	r2, r1, #3
 8003242:	4610      	mov	r0, r2
 8003244:	4619      	mov	r1, r3
 8003246:	4603      	mov	r3, r0
 8003248:	4642      	mov	r2, r8
 800324a:	189b      	adds	r3, r3, r2
 800324c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003250:	464b      	mov	r3, r9
 8003252:	460a      	mov	r2, r1
 8003254:	eb42 0303 	adc.w	r3, r2, r3
 8003258:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003268:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800326c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003270:	460b      	mov	r3, r1
 8003272:	18db      	adds	r3, r3, r3
 8003274:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003276:	4613      	mov	r3, r2
 8003278:	eb42 0303 	adc.w	r3, r2, r3
 800327c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800327e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003282:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003286:	f7fc ffbd 	bl	8000204 <__aeabi_uldivmod>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4b0d      	ldr	r3, [pc, #52]	@ (80032c4 <UART_SetConfig+0x2d4>)
 8003290:	fba3 1302 	umull	r1, r3, r3, r2
 8003294:	095b      	lsrs	r3, r3, #5
 8003296:	2164      	movs	r1, #100	@ 0x64
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	3332      	adds	r3, #50	@ 0x32
 80032a2:	4a08      	ldr	r2, [pc, #32]	@ (80032c4 <UART_SetConfig+0x2d4>)
 80032a4:	fba2 2303 	umull	r2, r3, r2, r3
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	f003 0207 	and.w	r2, r3, #7
 80032ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4422      	add	r2, r4
 80032b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032b8:	e106      	b.n	80034c8 <UART_SetConfig+0x4d8>
 80032ba:	bf00      	nop
 80032bc:	40011000 	.word	0x40011000
 80032c0:	40011400 	.word	0x40011400
 80032c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032cc:	2200      	movs	r2, #0
 80032ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80032d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80032d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80032da:	4642      	mov	r2, r8
 80032dc:	464b      	mov	r3, r9
 80032de:	1891      	adds	r1, r2, r2
 80032e0:	6239      	str	r1, [r7, #32]
 80032e2:	415b      	adcs	r3, r3
 80032e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032ea:	4641      	mov	r1, r8
 80032ec:	1854      	adds	r4, r2, r1
 80032ee:	4649      	mov	r1, r9
 80032f0:	eb43 0501 	adc.w	r5, r3, r1
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	00eb      	lsls	r3, r5, #3
 80032fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003302:	00e2      	lsls	r2, r4, #3
 8003304:	4614      	mov	r4, r2
 8003306:	461d      	mov	r5, r3
 8003308:	4643      	mov	r3, r8
 800330a:	18e3      	adds	r3, r4, r3
 800330c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003310:	464b      	mov	r3, r9
 8003312:	eb45 0303 	adc.w	r3, r5, r3
 8003316:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800331a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003326:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003336:	4629      	mov	r1, r5
 8003338:	008b      	lsls	r3, r1, #2
 800333a:	4621      	mov	r1, r4
 800333c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003340:	4621      	mov	r1, r4
 8003342:	008a      	lsls	r2, r1, #2
 8003344:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003348:	f7fc ff5c 	bl	8000204 <__aeabi_uldivmod>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4b60      	ldr	r3, [pc, #384]	@ (80034d4 <UART_SetConfig+0x4e4>)
 8003352:	fba3 2302 	umull	r2, r3, r3, r2
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	011c      	lsls	r4, r3, #4
 800335a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800335e:	2200      	movs	r2, #0
 8003360:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003364:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003368:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800336c:	4642      	mov	r2, r8
 800336e:	464b      	mov	r3, r9
 8003370:	1891      	adds	r1, r2, r2
 8003372:	61b9      	str	r1, [r7, #24]
 8003374:	415b      	adcs	r3, r3
 8003376:	61fb      	str	r3, [r7, #28]
 8003378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800337c:	4641      	mov	r1, r8
 800337e:	1851      	adds	r1, r2, r1
 8003380:	6139      	str	r1, [r7, #16]
 8003382:	4649      	mov	r1, r9
 8003384:	414b      	adcs	r3, r1
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003394:	4659      	mov	r1, fp
 8003396:	00cb      	lsls	r3, r1, #3
 8003398:	4651      	mov	r1, sl
 800339a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800339e:	4651      	mov	r1, sl
 80033a0:	00ca      	lsls	r2, r1, #3
 80033a2:	4610      	mov	r0, r2
 80033a4:	4619      	mov	r1, r3
 80033a6:	4603      	mov	r3, r0
 80033a8:	4642      	mov	r2, r8
 80033aa:	189b      	adds	r3, r3, r2
 80033ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033b0:	464b      	mov	r3, r9
 80033b2:	460a      	mov	r2, r1
 80033b4:	eb42 0303 	adc.w	r3, r2, r3
 80033b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80033d4:	4649      	mov	r1, r9
 80033d6:	008b      	lsls	r3, r1, #2
 80033d8:	4641      	mov	r1, r8
 80033da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033de:	4641      	mov	r1, r8
 80033e0:	008a      	lsls	r2, r1, #2
 80033e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80033e6:	f7fc ff0d 	bl	8000204 <__aeabi_uldivmod>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	4611      	mov	r1, r2
 80033f0:	4b38      	ldr	r3, [pc, #224]	@ (80034d4 <UART_SetConfig+0x4e4>)
 80033f2:	fba3 2301 	umull	r2, r3, r3, r1
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2264      	movs	r2, #100	@ 0x64
 80033fa:	fb02 f303 	mul.w	r3, r2, r3
 80033fe:	1acb      	subs	r3, r1, r3
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	3332      	adds	r3, #50	@ 0x32
 8003404:	4a33      	ldr	r2, [pc, #204]	@ (80034d4 <UART_SetConfig+0x4e4>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003410:	441c      	add	r4, r3
 8003412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003416:	2200      	movs	r2, #0
 8003418:	673b      	str	r3, [r7, #112]	@ 0x70
 800341a:	677a      	str	r2, [r7, #116]	@ 0x74
 800341c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003420:	4642      	mov	r2, r8
 8003422:	464b      	mov	r3, r9
 8003424:	1891      	adds	r1, r2, r2
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	415b      	adcs	r3, r3
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003430:	4641      	mov	r1, r8
 8003432:	1851      	adds	r1, r2, r1
 8003434:	6039      	str	r1, [r7, #0]
 8003436:	4649      	mov	r1, r9
 8003438:	414b      	adcs	r3, r1
 800343a:	607b      	str	r3, [r7, #4]
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003448:	4659      	mov	r1, fp
 800344a:	00cb      	lsls	r3, r1, #3
 800344c:	4651      	mov	r1, sl
 800344e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003452:	4651      	mov	r1, sl
 8003454:	00ca      	lsls	r2, r1, #3
 8003456:	4610      	mov	r0, r2
 8003458:	4619      	mov	r1, r3
 800345a:	4603      	mov	r3, r0
 800345c:	4642      	mov	r2, r8
 800345e:	189b      	adds	r3, r3, r2
 8003460:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003462:	464b      	mov	r3, r9
 8003464:	460a      	mov	r2, r1
 8003466:	eb42 0303 	adc.w	r3, r2, r3
 800346a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800346c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	663b      	str	r3, [r7, #96]	@ 0x60
 8003476:	667a      	str	r2, [r7, #100]	@ 0x64
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003484:	4649      	mov	r1, r9
 8003486:	008b      	lsls	r3, r1, #2
 8003488:	4641      	mov	r1, r8
 800348a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800348e:	4641      	mov	r1, r8
 8003490:	008a      	lsls	r2, r1, #2
 8003492:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003496:	f7fc feb5 	bl	8000204 <__aeabi_uldivmod>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4b0d      	ldr	r3, [pc, #52]	@ (80034d4 <UART_SetConfig+0x4e4>)
 80034a0:	fba3 1302 	umull	r1, r3, r3, r2
 80034a4:	095b      	lsrs	r3, r3, #5
 80034a6:	2164      	movs	r1, #100	@ 0x64
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	3332      	adds	r3, #50	@ 0x32
 80034b2:	4a08      	ldr	r2, [pc, #32]	@ (80034d4 <UART_SetConfig+0x4e4>)
 80034b4:	fba2 2303 	umull	r2, r3, r2, r3
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	f003 020f 	and.w	r2, r3, #15
 80034be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4422      	add	r2, r4
 80034c6:	609a      	str	r2, [r3, #8]
}
 80034c8:	bf00      	nop
 80034ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80034ce:	46bd      	mov	sp, r7
 80034d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034d4:	51eb851f 	.word	0x51eb851f

080034d8 <memset>:
 80034d8:	4402      	add	r2, r0
 80034da:	4603      	mov	r3, r0
 80034dc:	4293      	cmp	r3, r2
 80034de:	d100      	bne.n	80034e2 <memset+0xa>
 80034e0:	4770      	bx	lr
 80034e2:	f803 1b01 	strb.w	r1, [r3], #1
 80034e6:	e7f9      	b.n	80034dc <memset+0x4>

080034e8 <__libc_init_array>:
 80034e8:	b570      	push	{r4, r5, r6, lr}
 80034ea:	4d0d      	ldr	r5, [pc, #52]	@ (8003520 <__libc_init_array+0x38>)
 80034ec:	4c0d      	ldr	r4, [pc, #52]	@ (8003524 <__libc_init_array+0x3c>)
 80034ee:	1b64      	subs	r4, r4, r5
 80034f0:	10a4      	asrs	r4, r4, #2
 80034f2:	2600      	movs	r6, #0
 80034f4:	42a6      	cmp	r6, r4
 80034f6:	d109      	bne.n	800350c <__libc_init_array+0x24>
 80034f8:	4d0b      	ldr	r5, [pc, #44]	@ (8003528 <__libc_init_array+0x40>)
 80034fa:	4c0c      	ldr	r4, [pc, #48]	@ (800352c <__libc_init_array+0x44>)
 80034fc:	f000 f818 	bl	8003530 <_init>
 8003500:	1b64      	subs	r4, r4, r5
 8003502:	10a4      	asrs	r4, r4, #2
 8003504:	2600      	movs	r6, #0
 8003506:	42a6      	cmp	r6, r4
 8003508:	d105      	bne.n	8003516 <__libc_init_array+0x2e>
 800350a:	bd70      	pop	{r4, r5, r6, pc}
 800350c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003510:	4798      	blx	r3
 8003512:	3601      	adds	r6, #1
 8003514:	e7ee      	b.n	80034f4 <__libc_init_array+0xc>
 8003516:	f855 3b04 	ldr.w	r3, [r5], #4
 800351a:	4798      	blx	r3
 800351c:	3601      	adds	r6, #1
 800351e:	e7f2      	b.n	8003506 <__libc_init_array+0x1e>
 8003520:	08003568 	.word	0x08003568
 8003524:	08003568 	.word	0x08003568
 8003528:	08003568 	.word	0x08003568
 800352c:	0800356c 	.word	0x0800356c

08003530 <_init>:
 8003530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003532:	bf00      	nop
 8003534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003536:	bc08      	pop	{r3}
 8003538:	469e      	mov	lr, r3
 800353a:	4770      	bx	lr

0800353c <_fini>:
 800353c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353e:	bf00      	nop
 8003540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003542:	bc08      	pop	{r3}
 8003544:	469e      	mov	lr, r3
 8003546:	4770      	bx	lr
